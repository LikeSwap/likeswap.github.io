{"version":3,"sources":["E:/GDrive/LikeSwap/likeswap-farms/node_modules/js-base64/base64.mjs","E:/GDrive/LikeSwap/likeswap-farms/node_modules/bignumber.js/bignumber.mjs"],"names":["version","_hasatob","atob","_hasbtoa","btoa","_hasBuffer","Buffer","_TD","TextDecoder","undefined","_TE","TextEncoder","b64chs","Array","prototype","slice","call","b64tab","a","tab","forEach","c","i","b64re","_fromCC","String","fromCharCode","bind","_U8Afrom","Uint8Array","from","it","fn","x","map","_mkUriSafe","src","replace","m0","_tidyB64","s","btoaPolyfill","bin","u32","c0","c1","c2","asc","pad","length","charCodeAt","TypeError","substring","_btoa","toString","_fromUint8Array","u8a","strs","l","push","apply","subarray","join","fromUint8Array","urlsafe","cb_utob","cc","re_utob","utob","u","_encode","encode","encodeURI","re_btou","cb_btou","cccc","offset","btou","b","atobPolyfill","test","u24","r1","r2","charAt","_atob","_toUint8Array","toUint8Array","_unURI","_decode","decode","_noEnum","v","value","enumerable","writable","configurable","extendString","_add","name","body","Object","defineProperty","this","extendUint8Array","gBase64","VERSION","fromBase64","toBase64","encodeURL","isValid","extendBuiltins","isNumeric","mathceil","Math","ceil","mathfloor","floor","bignumberError","tooManyDigits","BASE","LOG_BASE","MAX_SAFE_INTEGER","POWS_TEN","SQRT_BASE","MAX","bitFloor","n","coeffToString","z","j","r","compare","y","xc","yc","k","e","intCheck","min","max","Error","isOdd","toExponential","str","toFixedPoint","len","zs","BigNumber","clone","configObject","div","convertBase","parseNumeric","P","constructor","valueOf","ONE","DECIMAL_PLACES","ROUNDING_MODE","TO_EXP_NEG","TO_EXP_POS","MIN_EXP","MAX_EXP","CRYPTO","MODULO_MODE","POW_PRECISION","FORMAT","prefix","groupSize","secondaryGroupSize","groupSeparator","decimalSeparator","fractionGroupSize","fractionGroupSeparator","suffix","ALPHABET","alphabet","caseChanged","isNum","_isBigNumber","indexOf","search","round","DEBUG","toUpperCase","toLowerCase","format","rm","id","ne","maxOrMin","args","method","m","normalise","pop","sd","d","ni","rd","pows10","out","ROUND_UP","ROUND_DOWN","ROUND_CEIL","ROUND_FLOOR","ROUND_HALF_UP","ROUND_HALF_DOWN","ROUND_HALF_EVEN","ROUND_HALF_CEIL","ROUND_HALF_FLOOR","EUCLID","config","set","obj","p","hasOwnProperty","crypto","getRandomValues","randomBytes","EXPONENTIAL_AT","RANGE","isBigNumber","maximum","arguments","lt","minimum","gt","random","pow2_53","random53bitInt","dp","rand","Uint32Array","copy","splice","sum","plus","decimal","toBaseOut","baseIn","baseOut","arrL","arr","reverse","sign","callerIsToString","pow","concat","multiply","base","temp","xlo","xhi","carry","klo","khi","aL","bL","cmp","subtract","more","prod","prodL","q","qc","rem","remL","rem0","xi","xL","yc0","yL","yz","NaN","basePrefix","dotAfter","dotBefore","isInfinityOrNaN","whitespaceOrPlus","isNaN","p1","p2","absoluteValue","abs","comparedTo","decimalPlaces","dividedBy","dividedToIntegerBy","idiv","exponentiatedBy","half","isModExp","nIsBig","nIsNeg","nIsOdd","isInteger","mod","times","integerValue","isEqualTo","eq","isFinite","isGreaterThan","isGreaterThanOrEqualTo","gte","isLessThan","isLessThanOrEqualTo","lte","isNegative","isPositive","isZero","minus","t","xLTy","xe","ye","modulo","multipliedBy","xcL","ycL","ylo","yhi","zc","sqrtBase","negated","precision","shiftedBy","squareRoot","sqrt","rep","toFixed","toFormat","split","g1","g2","intPart","fractionPart","isNeg","intDigits","substr","RegExp","toFraction","md","d0","d1","d2","exp","n0","n1","toNumber","toPrecision","toJSON","Symbol","toStringTag","for"],"mappings":"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","file":"static/js/2.4d1b6657.chunk.js","sourcesContent":["/**\n *  base64.ts\n *\n *  Licensed under the BSD 3-Clause License.\n *    http://opensource.org/licenses/BSD-3-Clause\n *\n *  References:\n *    http://en.wikipedia.org/wiki/Base64\n *\n * @author Dan Kogai (https://github.com/dankogai)\n */\nconst version = '3.7.2';\n/**\n * @deprecated use lowercase `version`.\n */\nconst VERSION = version;\nconst _hasatob = typeof atob === 'function';\nconst _hasbtoa = typeof btoa === 'function';\nconst _hasBuffer = typeof Buffer === 'function';\nconst _TD = typeof TextDecoder === 'function' ? new TextDecoder() : undefined;\nconst _TE = typeof TextEncoder === 'function' ? new TextEncoder() : undefined;\nconst b64ch = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=';\nconst b64chs = Array.prototype.slice.call(b64ch);\nconst b64tab = ((a) => {\n    let tab = {};\n    a.forEach((c, i) => tab[c] = i);\n    return tab;\n})(b64chs);\nconst b64re = /^(?:[A-Za-z\\d+\\/]{4})*?(?:[A-Za-z\\d+\\/]{2}(?:==)?|[A-Za-z\\d+\\/]{3}=?)?$/;\nconst _fromCC = String.fromCharCode.bind(String);\nconst _U8Afrom = typeof Uint8Array.from === 'function'\n    ? Uint8Array.from.bind(Uint8Array)\n    : (it, fn = (x) => x) => new Uint8Array(Array.prototype.slice.call(it, 0).map(fn));\nconst _mkUriSafe = (src) => src\n    .replace(/=/g, '').replace(/[+\\/]/g, (m0) => m0 == '+' ? '-' : '_');\nconst _tidyB64 = (s) => s.replace(/[^A-Za-z0-9\\+\\/]/g, '');\n/**\n * polyfill version of `btoa`\n */\nconst btoaPolyfill = (bin) => {\n    // console.log('polyfilled');\n    let u32, c0, c1, c2, asc = '';\n    const pad = bin.length % 3;\n    for (let i = 0; i < bin.length;) {\n        if ((c0 = bin.charCodeAt(i++)) > 255 ||\n            (c1 = bin.charCodeAt(i++)) > 255 ||\n            (c2 = bin.charCodeAt(i++)) > 255)\n            throw new TypeError('invalid character found');\n        u32 = (c0 << 16) | (c1 << 8) | c2;\n        asc += b64chs[u32 >> 18 & 63]\n            + b64chs[u32 >> 12 & 63]\n            + b64chs[u32 >> 6 & 63]\n            + b64chs[u32 & 63];\n    }\n    return pad ? asc.slice(0, pad - 3) + \"===\".substring(pad) : asc;\n};\n/**\n * does what `window.btoa` of web browsers do.\n * @param {String} bin binary string\n * @returns {string} Base64-encoded string\n */\nconst _btoa = _hasbtoa ? (bin) => btoa(bin)\n    : _hasBuffer ? (bin) => Buffer.from(bin, 'binary').toString('base64')\n        : btoaPolyfill;\nconst _fromUint8Array = _hasBuffer\n    ? (u8a) => Buffer.from(u8a).toString('base64')\n    : (u8a) => {\n        // cf. https://stackoverflow.com/questions/12710001/how-to-convert-uint8-array-to-base64-encoded-string/12713326#12713326\n        const maxargs = 0x1000;\n        let strs = [];\n        for (let i = 0, l = u8a.length; i < l; i += maxargs) {\n            strs.push(_fromCC.apply(null, u8a.subarray(i, i + maxargs)));\n        }\n        return _btoa(strs.join(''));\n    };\n/**\n * converts a Uint8Array to a Base64 string.\n * @param {boolean} [urlsafe] URL-and-filename-safe a la RFC4648 §5\n * @returns {string} Base64 string\n */\nconst fromUint8Array = (u8a, urlsafe = false) => urlsafe ? _mkUriSafe(_fromUint8Array(u8a)) : _fromUint8Array(u8a);\n// This trick is found broken https://github.com/dankogai/js-base64/issues/130\n// const utob = (src: string) => unescape(encodeURIComponent(src));\n// reverting good old fationed regexp\nconst cb_utob = (c) => {\n    if (c.length < 2) {\n        var cc = c.charCodeAt(0);\n        return cc < 0x80 ? c\n            : cc < 0x800 ? (_fromCC(0xc0 | (cc >>> 6))\n                + _fromCC(0x80 | (cc & 0x3f)))\n                : (_fromCC(0xe0 | ((cc >>> 12) & 0x0f))\n                    + _fromCC(0x80 | ((cc >>> 6) & 0x3f))\n                    + _fromCC(0x80 | (cc & 0x3f)));\n    }\n    else {\n        var cc = 0x10000\n            + (c.charCodeAt(0) - 0xD800) * 0x400\n            + (c.charCodeAt(1) - 0xDC00);\n        return (_fromCC(0xf0 | ((cc >>> 18) & 0x07))\n            + _fromCC(0x80 | ((cc >>> 12) & 0x3f))\n            + _fromCC(0x80 | ((cc >>> 6) & 0x3f))\n            + _fromCC(0x80 | (cc & 0x3f)));\n    }\n};\nconst re_utob = /[\\uD800-\\uDBFF][\\uDC00-\\uDFFFF]|[^\\x00-\\x7F]/g;\n/**\n * @deprecated should have been internal use only.\n * @param {string} src UTF-8 string\n * @returns {string} UTF-16 string\n */\nconst utob = (u) => u.replace(re_utob, cb_utob);\n//\nconst _encode = _hasBuffer\n    ? (s) => Buffer.from(s, 'utf8').toString('base64')\n    : _TE\n        ? (s) => _fromUint8Array(_TE.encode(s))\n        : (s) => _btoa(utob(s));\n/**\n * converts a UTF-8-encoded string to a Base64 string.\n * @param {boolean} [urlsafe] if `true` make the result URL-safe\n * @returns {string} Base64 string\n */\nconst encode = (src, urlsafe = false) => urlsafe\n    ? _mkUriSafe(_encode(src))\n    : _encode(src);\n/**\n * converts a UTF-8-encoded string to URL-safe Base64 RFC4648 §5.\n * @returns {string} Base64 string\n */\nconst encodeURI = (src) => encode(src, true);\n// This trick is found broken https://github.com/dankogai/js-base64/issues/130\n// const btou = (src: string) => decodeURIComponent(escape(src));\n// reverting good old fationed regexp\nconst re_btou = /[\\xC0-\\xDF][\\x80-\\xBF]|[\\xE0-\\xEF][\\x80-\\xBF]{2}|[\\xF0-\\xF7][\\x80-\\xBF]{3}/g;\nconst cb_btou = (cccc) => {\n    switch (cccc.length) {\n        case 4:\n            var cp = ((0x07 & cccc.charCodeAt(0)) << 18)\n                | ((0x3f & cccc.charCodeAt(1)) << 12)\n                | ((0x3f & cccc.charCodeAt(2)) << 6)\n                | (0x3f & cccc.charCodeAt(3)), offset = cp - 0x10000;\n            return (_fromCC((offset >>> 10) + 0xD800)\n                + _fromCC((offset & 0x3FF) + 0xDC00));\n        case 3:\n            return _fromCC(((0x0f & cccc.charCodeAt(0)) << 12)\n                | ((0x3f & cccc.charCodeAt(1)) << 6)\n                | (0x3f & cccc.charCodeAt(2)));\n        default:\n            return _fromCC(((0x1f & cccc.charCodeAt(0)) << 6)\n                | (0x3f & cccc.charCodeAt(1)));\n    }\n};\n/**\n * @deprecated should have been internal use only.\n * @param {string} src UTF-16 string\n * @returns {string} UTF-8 string\n */\nconst btou = (b) => b.replace(re_btou, cb_btou);\n/**\n * polyfill version of `atob`\n */\nconst atobPolyfill = (asc) => {\n    // console.log('polyfilled');\n    asc = asc.replace(/\\s+/g, '');\n    if (!b64re.test(asc))\n        throw new TypeError('malformed base64.');\n    asc += '=='.slice(2 - (asc.length & 3));\n    let u24, bin = '', r1, r2;\n    for (let i = 0; i < asc.length;) {\n        u24 = b64tab[asc.charAt(i++)] << 18\n            | b64tab[asc.charAt(i++)] << 12\n            | (r1 = b64tab[asc.charAt(i++)]) << 6\n            | (r2 = b64tab[asc.charAt(i++)]);\n        bin += r1 === 64 ? _fromCC(u24 >> 16 & 255)\n            : r2 === 64 ? _fromCC(u24 >> 16 & 255, u24 >> 8 & 255)\n                : _fromCC(u24 >> 16 & 255, u24 >> 8 & 255, u24 & 255);\n    }\n    return bin;\n};\n/**\n * does what `window.atob` of web browsers do.\n * @param {String} asc Base64-encoded string\n * @returns {string} binary string\n */\nconst _atob = _hasatob ? (asc) => atob(_tidyB64(asc))\n    : _hasBuffer ? (asc) => Buffer.from(asc, 'base64').toString('binary')\n        : atobPolyfill;\n//\nconst _toUint8Array = _hasBuffer\n    ? (a) => _U8Afrom(Buffer.from(a, 'base64'))\n    : (a) => _U8Afrom(_atob(a), c => c.charCodeAt(0));\n/**\n * converts a Base64 string to a Uint8Array.\n */\nconst toUint8Array = (a) => _toUint8Array(_unURI(a));\n//\nconst _decode = _hasBuffer\n    ? (a) => Buffer.from(a, 'base64').toString('utf8')\n    : _TD\n        ? (a) => _TD.decode(_toUint8Array(a))\n        : (a) => btou(_atob(a));\nconst _unURI = (a) => _tidyB64(a.replace(/[-_]/g, (m0) => m0 == '-' ? '+' : '/'));\n/**\n * converts a Base64 string to a UTF-8 string.\n * @param {String} src Base64 string.  Both normal and URL-safe are supported\n * @returns {string} UTF-8 string\n */\nconst decode = (src) => _decode(_unURI(src));\n/**\n * check if a value is a valid Base64 string\n * @param {String} src a value to check\n  */\nconst isValid = (src) => {\n    if (typeof src !== 'string')\n        return false;\n    const s = src.replace(/\\s+/g, '').replace(/={0,2}$/, '');\n    return !/[^\\s0-9a-zA-Z\\+/]/.test(s) || !/[^\\s0-9a-zA-Z\\-_]/.test(s);\n};\n//\nconst _noEnum = (v) => {\n    return {\n        value: v, enumerable: false, writable: true, configurable: true\n    };\n};\n/**\n * extend String.prototype with relevant methods\n */\nconst extendString = function () {\n    const _add = (name, body) => Object.defineProperty(String.prototype, name, _noEnum(body));\n    _add('fromBase64', function () { return decode(this); });\n    _add('toBase64', function (urlsafe) { return encode(this, urlsafe); });\n    _add('toBase64URI', function () { return encode(this, true); });\n    _add('toBase64URL', function () { return encode(this, true); });\n    _add('toUint8Array', function () { return toUint8Array(this); });\n};\n/**\n * extend Uint8Array.prototype with relevant methods\n */\nconst extendUint8Array = function () {\n    const _add = (name, body) => Object.defineProperty(Uint8Array.prototype, name, _noEnum(body));\n    _add('toBase64', function (urlsafe) { return fromUint8Array(this, urlsafe); });\n    _add('toBase64URI', function () { return fromUint8Array(this, true); });\n    _add('toBase64URL', function () { return fromUint8Array(this, true); });\n};\n/**\n * extend Builtin prototypes with relevant methods\n */\nconst extendBuiltins = () => {\n    extendString();\n    extendUint8Array();\n};\nconst gBase64 = {\n    version: version,\n    VERSION: VERSION,\n    atob: _atob,\n    atobPolyfill: atobPolyfill,\n    btoa: _btoa,\n    btoaPolyfill: btoaPolyfill,\n    fromBase64: decode,\n    toBase64: encode,\n    encode: encode,\n    encodeURI: encodeURI,\n    encodeURL: encodeURI,\n    utob: utob,\n    btou: btou,\n    decode: decode,\n    isValid: isValid,\n    fromUint8Array: fromUint8Array,\n    toUint8Array: toUint8Array,\n    extendString: extendString,\n    extendUint8Array: extendUint8Array,\n    extendBuiltins: extendBuiltins,\n};\n// makecjs:CUT //\nexport { version };\nexport { VERSION };\nexport { _atob as atob };\nexport { atobPolyfill };\nexport { _btoa as btoa };\nexport { btoaPolyfill };\nexport { decode as fromBase64 };\nexport { encode as toBase64 };\nexport { utob };\nexport { encode };\nexport { encodeURI };\nexport { encodeURI as encodeURL };\nexport { btou };\nexport { decode };\nexport { isValid };\nexport { fromUint8Array };\nexport { toUint8Array };\nexport { extendString };\nexport { extendUint8Array };\nexport { extendBuiltins };\n// and finally,\nexport { gBase64 as Base64 };\n","/*\r\n *      bignumber.js v9.0.1\r\n *      A JavaScript library for arbitrary-precision arithmetic.\r\n *      https://github.com/MikeMcl/bignumber.js\r\n *      Copyright (c) 2020 Michael Mclaughlin <M8ch88l@gmail.com>\r\n *      MIT Licensed.\r\n *\r\n *      BigNumber.prototype methods     |  BigNumber methods\r\n *                                      |\r\n *      absoluteValue            abs    |  clone\r\n *      comparedTo                      |  config               set\r\n *      decimalPlaces            dp     |      DECIMAL_PLACES\r\n *      dividedBy                div    |      ROUNDING_MODE\r\n *      dividedToIntegerBy       idiv   |      EXPONENTIAL_AT\r\n *      exponentiatedBy          pow    |      RANGE\r\n *      integerValue                    |      CRYPTO\r\n *      isEqualTo                eq     |      MODULO_MODE\r\n *      isFinite                        |      POW_PRECISION\r\n *      isGreaterThan            gt     |      FORMAT\r\n *      isGreaterThanOrEqualTo   gte    |      ALPHABET\r\n *      isInteger                       |  isBigNumber\r\n *      isLessThan               lt     |  maximum              max\r\n *      isLessThanOrEqualTo      lte    |  minimum              min\r\n *      isNaN                           |  random\r\n *      isNegative                      |  sum\r\n *      isPositive                      |\r\n *      isZero                          |\r\n *      minus                           |\r\n *      modulo                   mod    |\r\n *      multipliedBy             times  |\r\n *      negated                         |\r\n *      plus                            |\r\n *      precision                sd     |\r\n *      shiftedBy                       |\r\n *      squareRoot               sqrt   |\r\n *      toExponential                   |\r\n *      toFixed                         |\r\n *      toFormat                        |\r\n *      toFraction                      |\r\n *      toJSON                          |\r\n *      toNumber                        |\r\n *      toPrecision                     |\r\n *      toString                        |\r\n *      valueOf                         |\r\n *\r\n */\r\n\r\n\r\nvar\r\n  isNumeric = /^-?(?:\\d+(?:\\.\\d*)?|\\.\\d+)(?:e[+-]?\\d+)?$/i,\r\n\r\n  mathceil = Math.ceil,\r\n  mathfloor = Math.floor,\r\n\r\n  bignumberError = '[BigNumber Error] ',\r\n  tooManyDigits = bignumberError + 'Number primitive has more than 15 significant digits: ',\r\n\r\n  BASE = 1e14,\r\n  LOG_BASE = 14,\r\n  MAX_SAFE_INTEGER = 0x1fffffffffffff,         // 2^53 - 1\r\n  // MAX_INT32 = 0x7fffffff,                   // 2^31 - 1\r\n  POWS_TEN = [1, 10, 100, 1e3, 1e4, 1e5, 1e6, 1e7, 1e8, 1e9, 1e10, 1e11, 1e12, 1e13],\r\n  SQRT_BASE = 1e7,\r\n\r\n  // EDITABLE\r\n  // The limit on the value of DECIMAL_PLACES, TO_EXP_NEG, TO_EXP_POS, MIN_EXP, MAX_EXP, and\r\n  // the arguments to toExponential, toFixed, toFormat, and toPrecision.\r\n  MAX = 1E9;                                   // 0 to MAX_INT32\r\n\r\n\r\n/*\r\n * Create and return a BigNumber constructor.\r\n */\r\nfunction clone(configObject) {\r\n  var div, convertBase, parseNumeric,\r\n    P = BigNumber.prototype = { constructor: BigNumber, toString: null, valueOf: null },\r\n    ONE = new BigNumber(1),\r\n\r\n\r\n    //----------------------------- EDITABLE CONFIG DEFAULTS -------------------------------\r\n\r\n\r\n    // The default values below must be integers within the inclusive ranges stated.\r\n    // The values can also be changed at run-time using BigNumber.set.\r\n\r\n    // The maximum number of decimal places for operations involving division.\r\n    DECIMAL_PLACES = 20,                     // 0 to MAX\r\n\r\n    // The rounding mode used when rounding to the above decimal places, and when using\r\n    // toExponential, toFixed, toFormat and toPrecision, and round (default value).\r\n    // UP         0 Away from zero.\r\n    // DOWN       1 Towards zero.\r\n    // CEIL       2 Towards +Infinity.\r\n    // FLOOR      3 Towards -Infinity.\r\n    // HALF_UP    4 Towards nearest neighbour. If equidistant, up.\r\n    // HALF_DOWN  5 Towards nearest neighbour. If equidistant, down.\r\n    // HALF_EVEN  6 Towards nearest neighbour. If equidistant, towards even neighbour.\r\n    // HALF_CEIL  7 Towards nearest neighbour. If equidistant, towards +Infinity.\r\n    // HALF_FLOOR 8 Towards nearest neighbour. If equidistant, towards -Infinity.\r\n    ROUNDING_MODE = 4,                       // 0 to 8\r\n\r\n    // EXPONENTIAL_AT : [TO_EXP_NEG , TO_EXP_POS]\r\n\r\n    // The exponent value at and beneath which toString returns exponential notation.\r\n    // Number type: -7\r\n    TO_EXP_NEG = -7,                         // 0 to -MAX\r\n\r\n    // The exponent value at and above which toString returns exponential notation.\r\n    // Number type: 21\r\n    TO_EXP_POS = 21,                         // 0 to MAX\r\n\r\n    // RANGE : [MIN_EXP, MAX_EXP]\r\n\r\n    // The minimum exponent value, beneath which underflow to zero occurs.\r\n    // Number type: -324  (5e-324)\r\n    MIN_EXP = -1e7,                          // -1 to -MAX\r\n\r\n    // The maximum exponent value, above which overflow to Infinity occurs.\r\n    // Number type:  308  (1.7976931348623157e+308)\r\n    // For MAX_EXP > 1e7, e.g. new BigNumber('1e100000000').plus(1) may be slow.\r\n    MAX_EXP = 1e7,                           // 1 to MAX\r\n\r\n    // Whether to use cryptographically-secure random number generation, if available.\r\n    CRYPTO = false,                          // true or false\r\n\r\n    // The modulo mode used when calculating the modulus: a mod n.\r\n    // The quotient (q = a / n) is calculated according to the corresponding rounding mode.\r\n    // The remainder (r) is calculated as: r = a - n * q.\r\n    //\r\n    // UP        0 The remainder is positive if the dividend is negative, else is negative.\r\n    // DOWN      1 The remainder has the same sign as the dividend.\r\n    //             This modulo mode is commonly known as 'truncated division' and is\r\n    //             equivalent to (a % n) in JavaScript.\r\n    // FLOOR     3 The remainder has the same sign as the divisor (Python %).\r\n    // HALF_EVEN 6 This modulo mode implements the IEEE 754 remainder function.\r\n    // EUCLID    9 Euclidian division. q = sign(n) * floor(a / abs(n)).\r\n    //             The remainder is always positive.\r\n    //\r\n    // The truncated division, floored division, Euclidian division and IEEE 754 remainder\r\n    // modes are commonly used for the modulus operation.\r\n    // Although the other rounding modes can also be used, they may not give useful results.\r\n    MODULO_MODE = 1,                         // 0 to 9\r\n\r\n    // The maximum number of significant digits of the result of the exponentiatedBy operation.\r\n    // If POW_PRECISION is 0, there will be unlimited significant digits.\r\n    POW_PRECISION = 0,                    // 0 to MAX\r\n\r\n    // The format specification used by the BigNumber.prototype.toFormat method.\r\n    FORMAT = {\r\n      prefix: '',\r\n      groupSize: 3,\r\n      secondaryGroupSize: 0,\r\n      groupSeparator: ',',\r\n      decimalSeparator: '.',\r\n      fractionGroupSize: 0,\r\n      fractionGroupSeparator: '\\xA0',      // non-breaking space\r\n      suffix: ''\r\n    },\r\n\r\n    // The alphabet used for base conversion. It must be at least 2 characters long, with no '+',\r\n    // '-', '.', whitespace, or repeated character.\r\n    // '0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ$_'\r\n    ALPHABET = '0123456789abcdefghijklmnopqrstuvwxyz';\r\n\r\n\r\n  //------------------------------------------------------------------------------------------\r\n\r\n\r\n  // CONSTRUCTOR\r\n\r\n\r\n  /*\r\n   * The BigNumber constructor and exported function.\r\n   * Create and return a new instance of a BigNumber object.\r\n   *\r\n   * v {number|string|BigNumber} A numeric value.\r\n   * [b] {number} The base of v. Integer, 2 to ALPHABET.length inclusive.\r\n   */\r\n  function BigNumber(v, b) {\r\n    var alphabet, c, caseChanged, e, i, isNum, len, str,\r\n      x = this;\r\n\r\n    // Enable constructor call without `new`.\r\n    if (!(x instanceof BigNumber)) return new BigNumber(v, b);\r\n\r\n    if (b == null) {\r\n\r\n      if (v && v._isBigNumber === true) {\r\n        x.s = v.s;\r\n\r\n        if (!v.c || v.e > MAX_EXP) {\r\n          x.c = x.e = null;\r\n        } else if (v.e < MIN_EXP) {\r\n          x.c = [x.e = 0];\r\n        } else {\r\n          x.e = v.e;\r\n          x.c = v.c.slice();\r\n        }\r\n\r\n        return;\r\n      }\r\n\r\n      if ((isNum = typeof v == 'number') && v * 0 == 0) {\r\n\r\n        // Use `1 / n` to handle minus zero also.\r\n        x.s = 1 / v < 0 ? (v = -v, -1) : 1;\r\n\r\n        // Fast path for integers, where n < 2147483648 (2**31).\r\n        if (v === ~~v) {\r\n          for (e = 0, i = v; i >= 10; i /= 10, e++);\r\n\r\n          if (e > MAX_EXP) {\r\n            x.c = x.e = null;\r\n          } else {\r\n            x.e = e;\r\n            x.c = [v];\r\n          }\r\n\r\n          return;\r\n        }\r\n\r\n        str = String(v);\r\n      } else {\r\n\r\n        if (!isNumeric.test(str = String(v))) return parseNumeric(x, str, isNum);\r\n\r\n        x.s = str.charCodeAt(0) == 45 ? (str = str.slice(1), -1) : 1;\r\n      }\r\n\r\n      // Decimal point?\r\n      if ((e = str.indexOf('.')) > -1) str = str.replace('.', '');\r\n\r\n      // Exponential form?\r\n      if ((i = str.search(/e/i)) > 0) {\r\n\r\n        // Determine exponent.\r\n        if (e < 0) e = i;\r\n        e += +str.slice(i + 1);\r\n        str = str.substring(0, i);\r\n      } else if (e < 0) {\r\n\r\n        // Integer.\r\n        e = str.length;\r\n      }\r\n\r\n    } else {\r\n\r\n      // '[BigNumber Error] Base {not a primitive number|not an integer|out of range}: {b}'\r\n      intCheck(b, 2, ALPHABET.length, 'Base');\r\n\r\n      // Allow exponential notation to be used with base 10 argument, while\r\n      // also rounding to DECIMAL_PLACES as with other bases.\r\n      if (b == 10) {\r\n        x = new BigNumber(v);\r\n        return round(x, DECIMAL_PLACES + x.e + 1, ROUNDING_MODE);\r\n      }\r\n\r\n      str = String(v);\r\n\r\n      if (isNum = typeof v == 'number') {\r\n\r\n        // Avoid potential interpretation of Infinity and NaN as base 44+ values.\r\n        if (v * 0 != 0) return parseNumeric(x, str, isNum, b);\r\n\r\n        x.s = 1 / v < 0 ? (str = str.slice(1), -1) : 1;\r\n\r\n        // '[BigNumber Error] Number primitive has more than 15 significant digits: {n}'\r\n        if (BigNumber.DEBUG && str.replace(/^0\\.0*|\\./, '').length > 15) {\r\n          throw Error\r\n           (tooManyDigits + v);\r\n        }\r\n      } else {\r\n        x.s = str.charCodeAt(0) === 45 ? (str = str.slice(1), -1) : 1;\r\n      }\r\n\r\n      alphabet = ALPHABET.slice(0, b);\r\n      e = i = 0;\r\n\r\n      // Check that str is a valid base b number.\r\n      // Don't use RegExp, so alphabet can contain special characters.\r\n      for (len = str.length; i < len; i++) {\r\n        if (alphabet.indexOf(c = str.charAt(i)) < 0) {\r\n          if (c == '.') {\r\n\r\n            // If '.' is not the first character and it has not be found before.\r\n            if (i > e) {\r\n              e = len;\r\n              continue;\r\n            }\r\n          } else if (!caseChanged) {\r\n\r\n            // Allow e.g. hexadecimal 'FF' as well as 'ff'.\r\n            if (str == str.toUpperCase() && (str = str.toLowerCase()) ||\r\n                str == str.toLowerCase() && (str = str.toUpperCase())) {\r\n              caseChanged = true;\r\n              i = -1;\r\n              e = 0;\r\n              continue;\r\n            }\r\n          }\r\n\r\n          return parseNumeric(x, String(v), isNum, b);\r\n        }\r\n      }\r\n\r\n      // Prevent later check for length on converted number.\r\n      isNum = false;\r\n      str = convertBase(str, b, 10, x.s);\r\n\r\n      // Decimal point?\r\n      if ((e = str.indexOf('.')) > -1) str = str.replace('.', '');\r\n      else e = str.length;\r\n    }\r\n\r\n    // Determine leading zeros.\r\n    for (i = 0; str.charCodeAt(i) === 48; i++);\r\n\r\n    // Determine trailing zeros.\r\n    for (len = str.length; str.charCodeAt(--len) === 48;);\r\n\r\n    if (str = str.slice(i, ++len)) {\r\n      len -= i;\r\n\r\n      // '[BigNumber Error] Number primitive has more than 15 significant digits: {n}'\r\n      if (isNum && BigNumber.DEBUG &&\r\n        len > 15 && (v > MAX_SAFE_INTEGER || v !== mathfloor(v))) {\r\n          throw Error\r\n           (tooManyDigits + (x.s * v));\r\n      }\r\n\r\n       // Overflow?\r\n      if ((e = e - i - 1) > MAX_EXP) {\r\n\r\n        // Infinity.\r\n        x.c = x.e = null;\r\n\r\n      // Underflow?\r\n      } else if (e < MIN_EXP) {\r\n\r\n        // Zero.\r\n        x.c = [x.e = 0];\r\n      } else {\r\n        x.e = e;\r\n        x.c = [];\r\n\r\n        // Transform base\r\n\r\n        // e is the base 10 exponent.\r\n        // i is where to slice str to get the first element of the coefficient array.\r\n        i = (e + 1) % LOG_BASE;\r\n        if (e < 0) i += LOG_BASE;  // i < 1\r\n\r\n        if (i < len) {\r\n          if (i) x.c.push(+str.slice(0, i));\r\n\r\n          for (len -= LOG_BASE; i < len;) {\r\n            x.c.push(+str.slice(i, i += LOG_BASE));\r\n          }\r\n\r\n          i = LOG_BASE - (str = str.slice(i)).length;\r\n        } else {\r\n          i -= len;\r\n        }\r\n\r\n        for (; i--; str += '0');\r\n        x.c.push(+str);\r\n      }\r\n    } else {\r\n\r\n      // Zero.\r\n      x.c = [x.e = 0];\r\n    }\r\n  }\r\n\r\n\r\n  // CONSTRUCTOR PROPERTIES\r\n\r\n\r\n  BigNumber.clone = clone;\r\n\r\n  BigNumber.ROUND_UP = 0;\r\n  BigNumber.ROUND_DOWN = 1;\r\n  BigNumber.ROUND_CEIL = 2;\r\n  BigNumber.ROUND_FLOOR = 3;\r\n  BigNumber.ROUND_HALF_UP = 4;\r\n  BigNumber.ROUND_HALF_DOWN = 5;\r\n  BigNumber.ROUND_HALF_EVEN = 6;\r\n  BigNumber.ROUND_HALF_CEIL = 7;\r\n  BigNumber.ROUND_HALF_FLOOR = 8;\r\n  BigNumber.EUCLID = 9;\r\n\r\n\r\n  /*\r\n   * Configure infrequently-changing library-wide settings.\r\n   *\r\n   * Accept an object with the following optional properties (if the value of a property is\r\n   * a number, it must be an integer within the inclusive range stated):\r\n   *\r\n   *   DECIMAL_PLACES   {number}           0 to MAX\r\n   *   ROUNDING_MODE    {number}           0 to 8\r\n   *   EXPONENTIAL_AT   {number|number[]}  -MAX to MAX  or  [-MAX to 0, 0 to MAX]\r\n   *   RANGE            {number|number[]}  -MAX to MAX (not zero)  or  [-MAX to -1, 1 to MAX]\r\n   *   CRYPTO           {boolean}          true or false\r\n   *   MODULO_MODE      {number}           0 to 9\r\n   *   POW_PRECISION       {number}           0 to MAX\r\n   *   ALPHABET         {string}           A string of two or more unique characters which does\r\n   *                                     not contain '.'.\r\n   *   FORMAT           {object}           An object with some of the following properties:\r\n   *     prefix                 {string}\r\n   *     groupSize              {number}\r\n   *     secondaryGroupSize     {number}\r\n   *     groupSeparator         {string}\r\n   *     decimalSeparator       {string}\r\n   *     fractionGroupSize      {number}\r\n   *     fractionGroupSeparator {string}\r\n   *     suffix                 {string}\r\n   *\r\n   * (The values assigned to the above FORMAT object properties are not checked for validity.)\r\n   *\r\n   * E.g.\r\n   * BigNumber.config({ DECIMAL_PLACES : 20, ROUNDING_MODE : 4 })\r\n   *\r\n   * Ignore properties/parameters set to null or undefined, except for ALPHABET.\r\n   *\r\n   * Return an object with the properties current values.\r\n   */\r\n  BigNumber.config = BigNumber.set = function (obj) {\r\n    var p, v;\r\n\r\n    if (obj != null) {\r\n\r\n      if (typeof obj == 'object') {\r\n\r\n        // DECIMAL_PLACES {number} Integer, 0 to MAX inclusive.\r\n        // '[BigNumber Error] DECIMAL_PLACES {not a primitive number|not an integer|out of range}: {v}'\r\n        if (obj.hasOwnProperty(p = 'DECIMAL_PLACES')) {\r\n          v = obj[p];\r\n          intCheck(v, 0, MAX, p);\r\n          DECIMAL_PLACES = v;\r\n        }\r\n\r\n        // ROUNDING_MODE {number} Integer, 0 to 8 inclusive.\r\n        // '[BigNumber Error] ROUNDING_MODE {not a primitive number|not an integer|out of range}: {v}'\r\n        if (obj.hasOwnProperty(p = 'ROUNDING_MODE')) {\r\n          v = obj[p];\r\n          intCheck(v, 0, 8, p);\r\n          ROUNDING_MODE = v;\r\n        }\r\n\r\n        // EXPONENTIAL_AT {number|number[]}\r\n        // Integer, -MAX to MAX inclusive or\r\n        // [integer -MAX to 0 inclusive, 0 to MAX inclusive].\r\n        // '[BigNumber Error] EXPONENTIAL_AT {not a primitive number|not an integer|out of range}: {v}'\r\n        if (obj.hasOwnProperty(p = 'EXPONENTIAL_AT')) {\r\n          v = obj[p];\r\n          if (v && v.pop) {\r\n            intCheck(v[0], -MAX, 0, p);\r\n            intCheck(v[1], 0, MAX, p);\r\n            TO_EXP_NEG = v[0];\r\n            TO_EXP_POS = v[1];\r\n          } else {\r\n            intCheck(v, -MAX, MAX, p);\r\n            TO_EXP_NEG = -(TO_EXP_POS = v < 0 ? -v : v);\r\n          }\r\n        }\r\n\r\n        // RANGE {number|number[]} Non-zero integer, -MAX to MAX inclusive or\r\n        // [integer -MAX to -1 inclusive, integer 1 to MAX inclusive].\r\n        // '[BigNumber Error] RANGE {not a primitive number|not an integer|out of range|cannot be zero}: {v}'\r\n        if (obj.hasOwnProperty(p = 'RANGE')) {\r\n          v = obj[p];\r\n          if (v && v.pop) {\r\n            intCheck(v[0], -MAX, -1, p);\r\n            intCheck(v[1], 1, MAX, p);\r\n            MIN_EXP = v[0];\r\n            MAX_EXP = v[1];\r\n          } else {\r\n            intCheck(v, -MAX, MAX, p);\r\n            if (v) {\r\n              MIN_EXP = -(MAX_EXP = v < 0 ? -v : v);\r\n            } else {\r\n              throw Error\r\n               (bignumberError + p + ' cannot be zero: ' + v);\r\n            }\r\n          }\r\n        }\r\n\r\n        // CRYPTO {boolean} true or false.\r\n        // '[BigNumber Error] CRYPTO not true or false: {v}'\r\n        // '[BigNumber Error] crypto unavailable'\r\n        if (obj.hasOwnProperty(p = 'CRYPTO')) {\r\n          v = obj[p];\r\n          if (v === !!v) {\r\n            if (v) {\r\n              if (typeof crypto != 'undefined' && crypto &&\r\n               (crypto.getRandomValues || crypto.randomBytes)) {\r\n                CRYPTO = v;\r\n              } else {\r\n                CRYPTO = !v;\r\n                throw Error\r\n                 (bignumberError + 'crypto unavailable');\r\n              }\r\n            } else {\r\n              CRYPTO = v;\r\n            }\r\n          } else {\r\n            throw Error\r\n             (bignumberError + p + ' not true or false: ' + v);\r\n          }\r\n        }\r\n\r\n        // MODULO_MODE {number} Integer, 0 to 9 inclusive.\r\n        // '[BigNumber Error] MODULO_MODE {not a primitive number|not an integer|out of range}: {v}'\r\n        if (obj.hasOwnProperty(p = 'MODULO_MODE')) {\r\n          v = obj[p];\r\n          intCheck(v, 0, 9, p);\r\n          MODULO_MODE = v;\r\n        }\r\n\r\n        // POW_PRECISION {number} Integer, 0 to MAX inclusive.\r\n        // '[BigNumber Error] POW_PRECISION {not a primitive number|not an integer|out of range}: {v}'\r\n        if (obj.hasOwnProperty(p = 'POW_PRECISION')) {\r\n          v = obj[p];\r\n          intCheck(v, 0, MAX, p);\r\n          POW_PRECISION = v;\r\n        }\r\n\r\n        // FORMAT {object}\r\n        // '[BigNumber Error] FORMAT not an object: {v}'\r\n        if (obj.hasOwnProperty(p = 'FORMAT')) {\r\n          v = obj[p];\r\n          if (typeof v == 'object') FORMAT = v;\r\n          else throw Error\r\n           (bignumberError + p + ' not an object: ' + v);\r\n        }\r\n\r\n        // ALPHABET {string}\r\n        // '[BigNumber Error] ALPHABET invalid: {v}'\r\n        if (obj.hasOwnProperty(p = 'ALPHABET')) {\r\n          v = obj[p];\r\n\r\n          // Disallow if only one character,\r\n          // or if it contains '+', '-', '.', whitespace, or a repeated character.\r\n          if (typeof v == 'string' && !/^.$|[+-.\\s]|(.).*\\1/.test(v)) {\r\n            ALPHABET = v;\r\n          } else {\r\n            throw Error\r\n             (bignumberError + p + ' invalid: ' + v);\r\n          }\r\n        }\r\n\r\n      } else {\r\n\r\n        // '[BigNumber Error] Object expected: {v}'\r\n        throw Error\r\n         (bignumberError + 'Object expected: ' + obj);\r\n      }\r\n    }\r\n\r\n    return {\r\n      DECIMAL_PLACES: DECIMAL_PLACES,\r\n      ROUNDING_MODE: ROUNDING_MODE,\r\n      EXPONENTIAL_AT: [TO_EXP_NEG, TO_EXP_POS],\r\n      RANGE: [MIN_EXP, MAX_EXP],\r\n      CRYPTO: CRYPTO,\r\n      MODULO_MODE: MODULO_MODE,\r\n      POW_PRECISION: POW_PRECISION,\r\n      FORMAT: FORMAT,\r\n      ALPHABET: ALPHABET\r\n    };\r\n  };\r\n\r\n\r\n  /*\r\n   * Return true if v is a BigNumber instance, otherwise return false.\r\n   *\r\n   * If BigNumber.DEBUG is true, throw if a BigNumber instance is not well-formed.\r\n   *\r\n   * v {any}\r\n   *\r\n   * '[BigNumber Error] Invalid BigNumber: {v}'\r\n   */\r\n  BigNumber.isBigNumber = function (v) {\r\n    if (!v || v._isBigNumber !== true) return false;\r\n    if (!BigNumber.DEBUG) return true;\r\n\r\n    var i, n,\r\n      c = v.c,\r\n      e = v.e,\r\n      s = v.s;\r\n\r\n    out: if ({}.toString.call(c) == '[object Array]') {\r\n\r\n      if ((s === 1 || s === -1) && e >= -MAX && e <= MAX && e === mathfloor(e)) {\r\n\r\n        // If the first element is zero, the BigNumber value must be zero.\r\n        if (c[0] === 0) {\r\n          if (e === 0 && c.length === 1) return true;\r\n          break out;\r\n        }\r\n\r\n        // Calculate number of digits that c[0] should have, based on the exponent.\r\n        i = (e + 1) % LOG_BASE;\r\n        if (i < 1) i += LOG_BASE;\r\n\r\n        // Calculate number of digits of c[0].\r\n        //if (Math.ceil(Math.log(c[0] + 1) / Math.LN10) == i) {\r\n        if (String(c[0]).length == i) {\r\n\r\n          for (i = 0; i < c.length; i++) {\r\n            n = c[i];\r\n            if (n < 0 || n >= BASE || n !== mathfloor(n)) break out;\r\n          }\r\n\r\n          // Last element cannot be zero, unless it is the only element.\r\n          if (n !== 0) return true;\r\n        }\r\n      }\r\n\r\n    // Infinity/NaN\r\n    } else if (c === null && e === null && (s === null || s === 1 || s === -1)) {\r\n      return true;\r\n    }\r\n\r\n    throw Error\r\n      (bignumberError + 'Invalid BigNumber: ' + v);\r\n  };\r\n\r\n\r\n  /*\r\n   * Return a new BigNumber whose value is the maximum of the arguments.\r\n   *\r\n   * arguments {number|string|BigNumber}\r\n   */\r\n  BigNumber.maximum = BigNumber.max = function () {\r\n    return maxOrMin(arguments, P.lt);\r\n  };\r\n\r\n\r\n  /*\r\n   * Return a new BigNumber whose value is the minimum of the arguments.\r\n   *\r\n   * arguments {number|string|BigNumber}\r\n   */\r\n  BigNumber.minimum = BigNumber.min = function () {\r\n    return maxOrMin(arguments, P.gt);\r\n  };\r\n\r\n\r\n  /*\r\n   * Return a new BigNumber with a random value equal to or greater than 0 and less than 1,\r\n   * and with dp, or DECIMAL_PLACES if dp is omitted, decimal places (or less if trailing\r\n   * zeros are produced).\r\n   *\r\n   * [dp] {number} Decimal places. Integer, 0 to MAX inclusive.\r\n   *\r\n   * '[BigNumber Error] Argument {not a primitive number|not an integer|out of range}: {dp}'\r\n   * '[BigNumber Error] crypto unavailable'\r\n   */\r\n  BigNumber.random = (function () {\r\n    var pow2_53 = 0x20000000000000;\r\n\r\n    // Return a 53 bit integer n, where 0 <= n < 9007199254740992.\r\n    // Check if Math.random() produces more than 32 bits of randomness.\r\n    // If it does, assume at least 53 bits are produced, otherwise assume at least 30 bits.\r\n    // 0x40000000 is 2^30, 0x800000 is 2^23, 0x1fffff is 2^21 - 1.\r\n    var random53bitInt = (Math.random() * pow2_53) & 0x1fffff\r\n     ? function () { return mathfloor(Math.random() * pow2_53); }\r\n     : function () { return ((Math.random() * 0x40000000 | 0) * 0x800000) +\r\n       (Math.random() * 0x800000 | 0); };\r\n\r\n    return function (dp) {\r\n      var a, b, e, k, v,\r\n        i = 0,\r\n        c = [],\r\n        rand = new BigNumber(ONE);\r\n\r\n      if (dp == null) dp = DECIMAL_PLACES;\r\n      else intCheck(dp, 0, MAX);\r\n\r\n      k = mathceil(dp / LOG_BASE);\r\n\r\n      if (CRYPTO) {\r\n\r\n        // Browsers supporting crypto.getRandomValues.\r\n        if (crypto.getRandomValues) {\r\n\r\n          a = crypto.getRandomValues(new Uint32Array(k *= 2));\r\n\r\n          for (; i < k;) {\r\n\r\n            // 53 bits:\r\n            // ((Math.pow(2, 32) - 1) * Math.pow(2, 21)).toString(2)\r\n            // 11111 11111111 11111111 11111111 11100000 00000000 00000000\r\n            // ((Math.pow(2, 32) - 1) >>> 11).toString(2)\r\n            //                                     11111 11111111 11111111\r\n            // 0x20000 is 2^21.\r\n            v = a[i] * 0x20000 + (a[i + 1] >>> 11);\r\n\r\n            // Rejection sampling:\r\n            // 0 <= v < 9007199254740992\r\n            // Probability that v >= 9e15, is\r\n            // 7199254740992 / 9007199254740992 ~= 0.0008, i.e. 1 in 1251\r\n            if (v >= 9e15) {\r\n              b = crypto.getRandomValues(new Uint32Array(2));\r\n              a[i] = b[0];\r\n              a[i + 1] = b[1];\r\n            } else {\r\n\r\n              // 0 <= v <= 8999999999999999\r\n              // 0 <= (v % 1e14) <= 99999999999999\r\n              c.push(v % 1e14);\r\n              i += 2;\r\n            }\r\n          }\r\n          i = k / 2;\r\n\r\n        // Node.js supporting crypto.randomBytes.\r\n        } else if (crypto.randomBytes) {\r\n\r\n          // buffer\r\n          a = crypto.randomBytes(k *= 7);\r\n\r\n          for (; i < k;) {\r\n\r\n            // 0x1000000000000 is 2^48, 0x10000000000 is 2^40\r\n            // 0x100000000 is 2^32, 0x1000000 is 2^24\r\n            // 11111 11111111 11111111 11111111 11111111 11111111 11111111\r\n            // 0 <= v < 9007199254740992\r\n            v = ((a[i] & 31) * 0x1000000000000) + (a[i + 1] * 0x10000000000) +\r\n               (a[i + 2] * 0x100000000) + (a[i + 3] * 0x1000000) +\r\n               (a[i + 4] << 16) + (a[i + 5] << 8) + a[i + 6];\r\n\r\n            if (v >= 9e15) {\r\n              crypto.randomBytes(7).copy(a, i);\r\n            } else {\r\n\r\n              // 0 <= (v % 1e14) <= 99999999999999\r\n              c.push(v % 1e14);\r\n              i += 7;\r\n            }\r\n          }\r\n          i = k / 7;\r\n        } else {\r\n          CRYPTO = false;\r\n          throw Error\r\n           (bignumberError + 'crypto unavailable');\r\n        }\r\n      }\r\n\r\n      // Use Math.random.\r\n      if (!CRYPTO) {\r\n\r\n        for (; i < k;) {\r\n          v = random53bitInt();\r\n          if (v < 9e15) c[i++] = v % 1e14;\r\n        }\r\n      }\r\n\r\n      k = c[--i];\r\n      dp %= LOG_BASE;\r\n\r\n      // Convert trailing digits to zeros according to dp.\r\n      if (k && dp) {\r\n        v = POWS_TEN[LOG_BASE - dp];\r\n        c[i] = mathfloor(k / v) * v;\r\n      }\r\n\r\n      // Remove trailing elements which are zero.\r\n      for (; c[i] === 0; c.pop(), i--);\r\n\r\n      // Zero?\r\n      if (i < 0) {\r\n        c = [e = 0];\r\n      } else {\r\n\r\n        // Remove leading elements which are zero and adjust exponent accordingly.\r\n        for (e = -1 ; c[0] === 0; c.splice(0, 1), e -= LOG_BASE);\r\n\r\n        // Count the digits of the first element of c to determine leading zeros, and...\r\n        for (i = 1, v = c[0]; v >= 10; v /= 10, i++);\r\n\r\n        // adjust the exponent accordingly.\r\n        if (i < LOG_BASE) e -= LOG_BASE - i;\r\n      }\r\n\r\n      rand.e = e;\r\n      rand.c = c;\r\n      return rand;\r\n    };\r\n  })();\r\n\r\n\r\n   /*\r\n   * Return a BigNumber whose value is the sum of the arguments.\r\n   *\r\n   * arguments {number|string|BigNumber}\r\n   */\r\n  BigNumber.sum = function () {\r\n    var i = 1,\r\n      args = arguments,\r\n      sum = new BigNumber(args[0]);\r\n    for (; i < args.length;) sum = sum.plus(args[i++]);\r\n    return sum;\r\n  };\r\n\r\n\r\n  // PRIVATE FUNCTIONS\r\n\r\n\r\n  // Called by BigNumber and BigNumber.prototype.toString.\r\n  convertBase = (function () {\r\n    var decimal = '0123456789';\r\n\r\n    /*\r\n     * Convert string of baseIn to an array of numbers of baseOut.\r\n     * Eg. toBaseOut('255', 10, 16) returns [15, 15].\r\n     * Eg. toBaseOut('ff', 16, 10) returns [2, 5, 5].\r\n     */\r\n    function toBaseOut(str, baseIn, baseOut, alphabet) {\r\n      var j,\r\n        arr = [0],\r\n        arrL,\r\n        i = 0,\r\n        len = str.length;\r\n\r\n      for (; i < len;) {\r\n        for (arrL = arr.length; arrL--; arr[arrL] *= baseIn);\r\n\r\n        arr[0] += alphabet.indexOf(str.charAt(i++));\r\n\r\n        for (j = 0; j < arr.length; j++) {\r\n\r\n          if (arr[j] > baseOut - 1) {\r\n            if (arr[j + 1] == null) arr[j + 1] = 0;\r\n            arr[j + 1] += arr[j] / baseOut | 0;\r\n            arr[j] %= baseOut;\r\n          }\r\n        }\r\n      }\r\n\r\n      return arr.reverse();\r\n    }\r\n\r\n    // Convert a numeric string of baseIn to a numeric string of baseOut.\r\n    // If the caller is toString, we are converting from base 10 to baseOut.\r\n    // If the caller is BigNumber, we are converting from baseIn to base 10.\r\n    return function (str, baseIn, baseOut, sign, callerIsToString) {\r\n      var alphabet, d, e, k, r, x, xc, y,\r\n        i = str.indexOf('.'),\r\n        dp = DECIMAL_PLACES,\r\n        rm = ROUNDING_MODE;\r\n\r\n      // Non-integer.\r\n      if (i >= 0) {\r\n        k = POW_PRECISION;\r\n\r\n        // Unlimited precision.\r\n        POW_PRECISION = 0;\r\n        str = str.replace('.', '');\r\n        y = new BigNumber(baseIn);\r\n        x = y.pow(str.length - i);\r\n        POW_PRECISION = k;\r\n\r\n        // Convert str as if an integer, then restore the fraction part by dividing the\r\n        // result by its base raised to a power.\r\n\r\n        y.c = toBaseOut(toFixedPoint(coeffToString(x.c), x.e, '0'),\r\n         10, baseOut, decimal);\r\n        y.e = y.c.length;\r\n      }\r\n\r\n      // Convert the number as integer.\r\n\r\n      xc = toBaseOut(str, baseIn, baseOut, callerIsToString\r\n       ? (alphabet = ALPHABET, decimal)\r\n       : (alphabet = decimal, ALPHABET));\r\n\r\n      // xc now represents str as an integer and converted to baseOut. e is the exponent.\r\n      e = k = xc.length;\r\n\r\n      // Remove trailing zeros.\r\n      for (; xc[--k] == 0; xc.pop());\r\n\r\n      // Zero?\r\n      if (!xc[0]) return alphabet.charAt(0);\r\n\r\n      // Does str represent an integer? If so, no need for the division.\r\n      if (i < 0) {\r\n        --e;\r\n      } else {\r\n        x.c = xc;\r\n        x.e = e;\r\n\r\n        // The sign is needed for correct rounding.\r\n        x.s = sign;\r\n        x = div(x, y, dp, rm, baseOut);\r\n        xc = x.c;\r\n        r = x.r;\r\n        e = x.e;\r\n      }\r\n\r\n      // xc now represents str converted to baseOut.\r\n\r\n      // THe index of the rounding digit.\r\n      d = e + dp + 1;\r\n\r\n      // The rounding digit: the digit to the right of the digit that may be rounded up.\r\n      i = xc[d];\r\n\r\n      // Look at the rounding digits and mode to determine whether to round up.\r\n\r\n      k = baseOut / 2;\r\n      r = r || d < 0 || xc[d + 1] != null;\r\n\r\n      r = rm < 4 ? (i != null || r) && (rm == 0 || rm == (x.s < 0 ? 3 : 2))\r\n            : i > k || i == k &&(rm == 4 || r || rm == 6 && xc[d - 1] & 1 ||\r\n             rm == (x.s < 0 ? 8 : 7));\r\n\r\n      // If the index of the rounding digit is not greater than zero, or xc represents\r\n      // zero, then the result of the base conversion is zero or, if rounding up, a value\r\n      // such as 0.00001.\r\n      if (d < 1 || !xc[0]) {\r\n\r\n        // 1^-dp or 0\r\n        str = r ? toFixedPoint(alphabet.charAt(1), -dp, alphabet.charAt(0)) : alphabet.charAt(0);\r\n      } else {\r\n\r\n        // Truncate xc to the required number of decimal places.\r\n        xc.length = d;\r\n\r\n        // Round up?\r\n        if (r) {\r\n\r\n          // Rounding up may mean the previous digit has to be rounded up and so on.\r\n          for (--baseOut; ++xc[--d] > baseOut;) {\r\n            xc[d] = 0;\r\n\r\n            if (!d) {\r\n              ++e;\r\n              xc = [1].concat(xc);\r\n            }\r\n          }\r\n        }\r\n\r\n        // Determine trailing zeros.\r\n        for (k = xc.length; !xc[--k];);\r\n\r\n        // E.g. [4, 11, 15] becomes 4bf.\r\n        for (i = 0, str = ''; i <= k; str += alphabet.charAt(xc[i++]));\r\n\r\n        // Add leading zeros, decimal point and trailing zeros as required.\r\n        str = toFixedPoint(str, e, alphabet.charAt(0));\r\n      }\r\n\r\n      // The caller will add the sign.\r\n      return str;\r\n    };\r\n  })();\r\n\r\n\r\n  // Perform division in the specified base. Called by div and convertBase.\r\n  div = (function () {\r\n\r\n    // Assume non-zero x and k.\r\n    function multiply(x, k, base) {\r\n      var m, temp, xlo, xhi,\r\n        carry = 0,\r\n        i = x.length,\r\n        klo = k % SQRT_BASE,\r\n        khi = k / SQRT_BASE | 0;\r\n\r\n      for (x = x.slice(); i--;) {\r\n        xlo = x[i] % SQRT_BASE;\r\n        xhi = x[i] / SQRT_BASE | 0;\r\n        m = khi * xlo + xhi * klo;\r\n        temp = klo * xlo + ((m % SQRT_BASE) * SQRT_BASE) + carry;\r\n        carry = (temp / base | 0) + (m / SQRT_BASE | 0) + khi * xhi;\r\n        x[i] = temp % base;\r\n      }\r\n\r\n      if (carry) x = [carry].concat(x);\r\n\r\n      return x;\r\n    }\r\n\r\n    function compare(a, b, aL, bL) {\r\n      var i, cmp;\r\n\r\n      if (aL != bL) {\r\n        cmp = aL > bL ? 1 : -1;\r\n      } else {\r\n\r\n        for (i = cmp = 0; i < aL; i++) {\r\n\r\n          if (a[i] != b[i]) {\r\n            cmp = a[i] > b[i] ? 1 : -1;\r\n            break;\r\n          }\r\n        }\r\n      }\r\n\r\n      return cmp;\r\n    }\r\n\r\n    function subtract(a, b, aL, base) {\r\n      var i = 0;\r\n\r\n      // Subtract b from a.\r\n      for (; aL--;) {\r\n        a[aL] -= i;\r\n        i = a[aL] < b[aL] ? 1 : 0;\r\n        a[aL] = i * base + a[aL] - b[aL];\r\n      }\r\n\r\n      // Remove leading zeros.\r\n      for (; !a[0] && a.length > 1; a.splice(0, 1));\r\n    }\r\n\r\n    // x: dividend, y: divisor.\r\n    return function (x, y, dp, rm, base) {\r\n      var cmp, e, i, more, n, prod, prodL, q, qc, rem, remL, rem0, xi, xL, yc0,\r\n        yL, yz,\r\n        s = x.s == y.s ? 1 : -1,\r\n        xc = x.c,\r\n        yc = y.c;\r\n\r\n      // Either NaN, Infinity or 0?\r\n      if (!xc || !xc[0] || !yc || !yc[0]) {\r\n\r\n        return new BigNumber(\r\n\r\n         // Return NaN if either NaN, or both Infinity or 0.\r\n         !x.s || !y.s || (xc ? yc && xc[0] == yc[0] : !yc) ? NaN :\r\n\r\n          // Return ±0 if x is ±0 or y is ±Infinity, or return ±Infinity as y is ±0.\r\n          xc && xc[0] == 0 || !yc ? s * 0 : s / 0\r\n       );\r\n      }\r\n\r\n      q = new BigNumber(s);\r\n      qc = q.c = [];\r\n      e = x.e - y.e;\r\n      s = dp + e + 1;\r\n\r\n      if (!base) {\r\n        base = BASE;\r\n        e = bitFloor(x.e / LOG_BASE) - bitFloor(y.e / LOG_BASE);\r\n        s = s / LOG_BASE | 0;\r\n      }\r\n\r\n      // Result exponent may be one less then the current value of e.\r\n      // The coefficients of the BigNumbers from convertBase may have trailing zeros.\r\n      for (i = 0; yc[i] == (xc[i] || 0); i++);\r\n\r\n      if (yc[i] > (xc[i] || 0)) e--;\r\n\r\n      if (s < 0) {\r\n        qc.push(1);\r\n        more = true;\r\n      } else {\r\n        xL = xc.length;\r\n        yL = yc.length;\r\n        i = 0;\r\n        s += 2;\r\n\r\n        // Normalise xc and yc so highest order digit of yc is >= base / 2.\r\n\r\n        n = mathfloor(base / (yc[0] + 1));\r\n\r\n        // Not necessary, but to handle odd bases where yc[0] == (base / 2) - 1.\r\n        // if (n > 1 || n++ == 1 && yc[0] < base / 2) {\r\n        if (n > 1) {\r\n          yc = multiply(yc, n, base);\r\n          xc = multiply(xc, n, base);\r\n          yL = yc.length;\r\n          xL = xc.length;\r\n        }\r\n\r\n        xi = yL;\r\n        rem = xc.slice(0, yL);\r\n        remL = rem.length;\r\n\r\n        // Add zeros to make remainder as long as divisor.\r\n        for (; remL < yL; rem[remL++] = 0);\r\n        yz = yc.slice();\r\n        yz = [0].concat(yz);\r\n        yc0 = yc[0];\r\n        if (yc[1] >= base / 2) yc0++;\r\n        // Not necessary, but to prevent trial digit n > base, when using base 3.\r\n        // else if (base == 3 && yc0 == 1) yc0 = 1 + 1e-15;\r\n\r\n        do {\r\n          n = 0;\r\n\r\n          // Compare divisor and remainder.\r\n          cmp = compare(yc, rem, yL, remL);\r\n\r\n          // If divisor < remainder.\r\n          if (cmp < 0) {\r\n\r\n            // Calculate trial digit, n.\r\n\r\n            rem0 = rem[0];\r\n            if (yL != remL) rem0 = rem0 * base + (rem[1] || 0);\r\n\r\n            // n is how many times the divisor goes into the current remainder.\r\n            n = mathfloor(rem0 / yc0);\r\n\r\n            //  Algorithm:\r\n            //  product = divisor multiplied by trial digit (n).\r\n            //  Compare product and remainder.\r\n            //  If product is greater than remainder:\r\n            //    Subtract divisor from product, decrement trial digit.\r\n            //  Subtract product from remainder.\r\n            //  If product was less than remainder at the last compare:\r\n            //    Compare new remainder and divisor.\r\n            //    If remainder is greater than divisor:\r\n            //      Subtract divisor from remainder, increment trial digit.\r\n\r\n            if (n > 1) {\r\n\r\n              // n may be > base only when base is 3.\r\n              if (n >= base) n = base - 1;\r\n\r\n              // product = divisor * trial digit.\r\n              prod = multiply(yc, n, base);\r\n              prodL = prod.length;\r\n              remL = rem.length;\r\n\r\n              // Compare product and remainder.\r\n              // If product > remainder then trial digit n too high.\r\n              // n is 1 too high about 5% of the time, and is not known to have\r\n              // ever been more than 1 too high.\r\n              while (compare(prod, rem, prodL, remL) == 1) {\r\n                n--;\r\n\r\n                // Subtract divisor from product.\r\n                subtract(prod, yL < prodL ? yz : yc, prodL, base);\r\n                prodL = prod.length;\r\n                cmp = 1;\r\n              }\r\n            } else {\r\n\r\n              // n is 0 or 1, cmp is -1.\r\n              // If n is 0, there is no need to compare yc and rem again below,\r\n              // so change cmp to 1 to avoid it.\r\n              // If n is 1, leave cmp as -1, so yc and rem are compared again.\r\n              if (n == 0) {\r\n\r\n                // divisor < remainder, so n must be at least 1.\r\n                cmp = n = 1;\r\n              }\r\n\r\n              // product = divisor\r\n              prod = yc.slice();\r\n              prodL = prod.length;\r\n            }\r\n\r\n            if (prodL < remL) prod = [0].concat(prod);\r\n\r\n            // Subtract product from remainder.\r\n            subtract(rem, prod, remL, base);\r\n            remL = rem.length;\r\n\r\n             // If product was < remainder.\r\n            if (cmp == -1) {\r\n\r\n              // Compare divisor and new remainder.\r\n              // If divisor < new remainder, subtract divisor from remainder.\r\n              // Trial digit n too low.\r\n              // n is 1 too low about 5% of the time, and very rarely 2 too low.\r\n              while (compare(yc, rem, yL, remL) < 1) {\r\n                n++;\r\n\r\n                // Subtract divisor from remainder.\r\n                subtract(rem, yL < remL ? yz : yc, remL, base);\r\n                remL = rem.length;\r\n              }\r\n            }\r\n          } else if (cmp === 0) {\r\n            n++;\r\n            rem = [0];\r\n          } // else cmp === 1 and n will be 0\r\n\r\n          // Add the next digit, n, to the result array.\r\n          qc[i++] = n;\r\n\r\n          // Update the remainder.\r\n          if (rem[0]) {\r\n            rem[remL++] = xc[xi] || 0;\r\n          } else {\r\n            rem = [xc[xi]];\r\n            remL = 1;\r\n          }\r\n        } while ((xi++ < xL || rem[0] != null) && s--);\r\n\r\n        more = rem[0] != null;\r\n\r\n        // Leading zero?\r\n        if (!qc[0]) qc.splice(0, 1);\r\n      }\r\n\r\n      if (base == BASE) {\r\n\r\n        // To calculate q.e, first get the number of digits of qc[0].\r\n        for (i = 1, s = qc[0]; s >= 10; s /= 10, i++);\r\n\r\n        round(q, dp + (q.e = i + e * LOG_BASE - 1) + 1, rm, more);\r\n\r\n      // Caller is convertBase.\r\n      } else {\r\n        q.e = e;\r\n        q.r = +more;\r\n      }\r\n\r\n      return q;\r\n    };\r\n  })();\r\n\r\n\r\n  /*\r\n   * Return a string representing the value of BigNumber n in fixed-point or exponential\r\n   * notation rounded to the specified decimal places or significant digits.\r\n   *\r\n   * n: a BigNumber.\r\n   * i: the index of the last digit required (i.e. the digit that may be rounded up).\r\n   * rm: the rounding mode.\r\n   * id: 1 (toExponential) or 2 (toPrecision).\r\n   */\r\n  function format(n, i, rm, id) {\r\n    var c0, e, ne, len, str;\r\n\r\n    if (rm == null) rm = ROUNDING_MODE;\r\n    else intCheck(rm, 0, 8);\r\n\r\n    if (!n.c) return n.toString();\r\n\r\n    c0 = n.c[0];\r\n    ne = n.e;\r\n\r\n    if (i == null) {\r\n      str = coeffToString(n.c);\r\n      str = id == 1 || id == 2 && (ne <= TO_EXP_NEG || ne >= TO_EXP_POS)\r\n       ? toExponential(str, ne)\r\n       : toFixedPoint(str, ne, '0');\r\n    } else {\r\n      n = round(new BigNumber(n), i, rm);\r\n\r\n      // n.e may have changed if the value was rounded up.\r\n      e = n.e;\r\n\r\n      str = coeffToString(n.c);\r\n      len = str.length;\r\n\r\n      // toPrecision returns exponential notation if the number of significant digits\r\n      // specified is less than the number of digits necessary to represent the integer\r\n      // part of the value in fixed-point notation.\r\n\r\n      // Exponential notation.\r\n      if (id == 1 || id == 2 && (i <= e || e <= TO_EXP_NEG)) {\r\n\r\n        // Append zeros?\r\n        for (; len < i; str += '0', len++);\r\n        str = toExponential(str, e);\r\n\r\n      // Fixed-point notation.\r\n      } else {\r\n        i -= ne;\r\n        str = toFixedPoint(str, e, '0');\r\n\r\n        // Append zeros?\r\n        if (e + 1 > len) {\r\n          if (--i > 0) for (str += '.'; i--; str += '0');\r\n        } else {\r\n          i += e - len;\r\n          if (i > 0) {\r\n            if (e + 1 == len) str += '.';\r\n            for (; i--; str += '0');\r\n          }\r\n        }\r\n      }\r\n    }\r\n\r\n    return n.s < 0 && c0 ? '-' + str : str;\r\n  }\r\n\r\n\r\n  // Handle BigNumber.max and BigNumber.min.\r\n  function maxOrMin(args, method) {\r\n    var n,\r\n      i = 1,\r\n      m = new BigNumber(args[0]);\r\n\r\n    for (; i < args.length; i++) {\r\n      n = new BigNumber(args[i]);\r\n\r\n      // If any number is NaN, return NaN.\r\n      if (!n.s) {\r\n        m = n;\r\n        break;\r\n      } else if (method.call(m, n)) {\r\n        m = n;\r\n      }\r\n    }\r\n\r\n    return m;\r\n  }\r\n\r\n\r\n  /*\r\n   * Strip trailing zeros, calculate base 10 exponent and check against MIN_EXP and MAX_EXP.\r\n   * Called by minus, plus and times.\r\n   */\r\n  function normalise(n, c, e) {\r\n    var i = 1,\r\n      j = c.length;\r\n\r\n     // Remove trailing zeros.\r\n    for (; !c[--j]; c.pop());\r\n\r\n    // Calculate the base 10 exponent. First get the number of digits of c[0].\r\n    for (j = c[0]; j >= 10; j /= 10, i++);\r\n\r\n    // Overflow?\r\n    if ((e = i + e * LOG_BASE - 1) > MAX_EXP) {\r\n\r\n      // Infinity.\r\n      n.c = n.e = null;\r\n\r\n    // Underflow?\r\n    } else if (e < MIN_EXP) {\r\n\r\n      // Zero.\r\n      n.c = [n.e = 0];\r\n    } else {\r\n      n.e = e;\r\n      n.c = c;\r\n    }\r\n\r\n    return n;\r\n  }\r\n\r\n\r\n  // Handle values that fail the validity test in BigNumber.\r\n  parseNumeric = (function () {\r\n    var basePrefix = /^(-?)0([xbo])(?=\\w[\\w.]*$)/i,\r\n      dotAfter = /^([^.]+)\\.$/,\r\n      dotBefore = /^\\.([^.]+)$/,\r\n      isInfinityOrNaN = /^-?(Infinity|NaN)$/,\r\n      whitespaceOrPlus = /^\\s*\\+(?=[\\w.])|^\\s+|\\s+$/g;\r\n\r\n    return function (x, str, isNum, b) {\r\n      var base,\r\n        s = isNum ? str : str.replace(whitespaceOrPlus, '');\r\n\r\n      // No exception on ±Infinity or NaN.\r\n      if (isInfinityOrNaN.test(s)) {\r\n        x.s = isNaN(s) ? null : s < 0 ? -1 : 1;\r\n      } else {\r\n        if (!isNum) {\r\n\r\n          // basePrefix = /^(-?)0([xbo])(?=\\w[\\w.]*$)/i\r\n          s = s.replace(basePrefix, function (m, p1, p2) {\r\n            base = (p2 = p2.toLowerCase()) == 'x' ? 16 : p2 == 'b' ? 2 : 8;\r\n            return !b || b == base ? p1 : m;\r\n          });\r\n\r\n          if (b) {\r\n            base = b;\r\n\r\n            // E.g. '1.' to '1', '.1' to '0.1'\r\n            s = s.replace(dotAfter, '$1').replace(dotBefore, '0.$1');\r\n          }\r\n\r\n          if (str != s) return new BigNumber(s, base);\r\n        }\r\n\r\n        // '[BigNumber Error] Not a number: {n}'\r\n        // '[BigNumber Error] Not a base {b} number: {n}'\r\n        if (BigNumber.DEBUG) {\r\n          throw Error\r\n            (bignumberError + 'Not a' + (b ? ' base ' + b : '') + ' number: ' + str);\r\n        }\r\n\r\n        // NaN\r\n        x.s = null;\r\n      }\r\n\r\n      x.c = x.e = null;\r\n    }\r\n  })();\r\n\r\n\r\n  /*\r\n   * Round x to sd significant digits using rounding mode rm. Check for over/under-flow.\r\n   * If r is truthy, it is known that there are more digits after the rounding digit.\r\n   */\r\n  function round(x, sd, rm, r) {\r\n    var d, i, j, k, n, ni, rd,\r\n      xc = x.c,\r\n      pows10 = POWS_TEN;\r\n\r\n    // if x is not Infinity or NaN...\r\n    if (xc) {\r\n\r\n      // rd is the rounding digit, i.e. the digit after the digit that may be rounded up.\r\n      // n is a base 1e14 number, the value of the element of array x.c containing rd.\r\n      // ni is the index of n within x.c.\r\n      // d is the number of digits of n.\r\n      // i is the index of rd within n including leading zeros.\r\n      // j is the actual index of rd within n (if < 0, rd is a leading zero).\r\n      out: {\r\n\r\n        // Get the number of digits of the first element of xc.\r\n        for (d = 1, k = xc[0]; k >= 10; k /= 10, d++);\r\n        i = sd - d;\r\n\r\n        // If the rounding digit is in the first element of xc...\r\n        if (i < 0) {\r\n          i += LOG_BASE;\r\n          j = sd;\r\n          n = xc[ni = 0];\r\n\r\n          // Get the rounding digit at index j of n.\r\n          rd = n / pows10[d - j - 1] % 10 | 0;\r\n        } else {\r\n          ni = mathceil((i + 1) / LOG_BASE);\r\n\r\n          if (ni >= xc.length) {\r\n\r\n            if (r) {\r\n\r\n              // Needed by sqrt.\r\n              for (; xc.length <= ni; xc.push(0));\r\n              n = rd = 0;\r\n              d = 1;\r\n              i %= LOG_BASE;\r\n              j = i - LOG_BASE + 1;\r\n            } else {\r\n              break out;\r\n            }\r\n          } else {\r\n            n = k = xc[ni];\r\n\r\n            // Get the number of digits of n.\r\n            for (d = 1; k >= 10; k /= 10, d++);\r\n\r\n            // Get the index of rd within n.\r\n            i %= LOG_BASE;\r\n\r\n            // Get the index of rd within n, adjusted for leading zeros.\r\n            // The number of leading zeros of n is given by LOG_BASE - d.\r\n            j = i - LOG_BASE + d;\r\n\r\n            // Get the rounding digit at index j of n.\r\n            rd = j < 0 ? 0 : n / pows10[d - j - 1] % 10 | 0;\r\n          }\r\n        }\r\n\r\n        r = r || sd < 0 ||\r\n\r\n        // Are there any non-zero digits after the rounding digit?\r\n        // The expression  n % pows10[d - j - 1]  returns all digits of n to the right\r\n        // of the digit at j, e.g. if n is 908714 and j is 2, the expression gives 714.\r\n         xc[ni + 1] != null || (j < 0 ? n : n % pows10[d - j - 1]);\r\n\r\n        r = rm < 4\r\n         ? (rd || r) && (rm == 0 || rm == (x.s < 0 ? 3 : 2))\r\n         : rd > 5 || rd == 5 && (rm == 4 || r || rm == 6 &&\r\n\r\n          // Check whether the digit to the left of the rounding digit is odd.\r\n          ((i > 0 ? j > 0 ? n / pows10[d - j] : 0 : xc[ni - 1]) % 10) & 1 ||\r\n           rm == (x.s < 0 ? 8 : 7));\r\n\r\n        if (sd < 1 || !xc[0]) {\r\n          xc.length = 0;\r\n\r\n          if (r) {\r\n\r\n            // Convert sd to decimal places.\r\n            sd -= x.e + 1;\r\n\r\n            // 1, 0.1, 0.01, 0.001, 0.0001 etc.\r\n            xc[0] = pows10[(LOG_BASE - sd % LOG_BASE) % LOG_BASE];\r\n            x.e = -sd || 0;\r\n          } else {\r\n\r\n            // Zero.\r\n            xc[0] = x.e = 0;\r\n          }\r\n\r\n          return x;\r\n        }\r\n\r\n        // Remove excess digits.\r\n        if (i == 0) {\r\n          xc.length = ni;\r\n          k = 1;\r\n          ni--;\r\n        } else {\r\n          xc.length = ni + 1;\r\n          k = pows10[LOG_BASE - i];\r\n\r\n          // E.g. 56700 becomes 56000 if 7 is the rounding digit.\r\n          // j > 0 means i > number of leading zeros of n.\r\n          xc[ni] = j > 0 ? mathfloor(n / pows10[d - j] % pows10[j]) * k : 0;\r\n        }\r\n\r\n        // Round up?\r\n        if (r) {\r\n\r\n          for (; ;) {\r\n\r\n            // If the digit to be rounded up is in the first element of xc...\r\n            if (ni == 0) {\r\n\r\n              // i will be the length of xc[0] before k is added.\r\n              for (i = 1, j = xc[0]; j >= 10; j /= 10, i++);\r\n              j = xc[0] += k;\r\n              for (k = 1; j >= 10; j /= 10, k++);\r\n\r\n              // if i != k the length has increased.\r\n              if (i != k) {\r\n                x.e++;\r\n                if (xc[0] == BASE) xc[0] = 1;\r\n              }\r\n\r\n              break;\r\n            } else {\r\n              xc[ni] += k;\r\n              if (xc[ni] != BASE) break;\r\n              xc[ni--] = 0;\r\n              k = 1;\r\n            }\r\n          }\r\n        }\r\n\r\n        // Remove trailing zeros.\r\n        for (i = xc.length; xc[--i] === 0; xc.pop());\r\n      }\r\n\r\n      // Overflow? Infinity.\r\n      if (x.e > MAX_EXP) {\r\n        x.c = x.e = null;\r\n\r\n      // Underflow? Zero.\r\n      } else if (x.e < MIN_EXP) {\r\n        x.c = [x.e = 0];\r\n      }\r\n    }\r\n\r\n    return x;\r\n  }\r\n\r\n\r\n  function valueOf(n) {\r\n    var str,\r\n      e = n.e;\r\n\r\n    if (e === null) return n.toString();\r\n\r\n    str = coeffToString(n.c);\r\n\r\n    str = e <= TO_EXP_NEG || e >= TO_EXP_POS\r\n      ? toExponential(str, e)\r\n      : toFixedPoint(str, e, '0');\r\n\r\n    return n.s < 0 ? '-' + str : str;\r\n  }\r\n\r\n\r\n  // PROTOTYPE/INSTANCE METHODS\r\n\r\n\r\n  /*\r\n   * Return a new BigNumber whose value is the absolute value of this BigNumber.\r\n   */\r\n  P.absoluteValue = P.abs = function () {\r\n    var x = new BigNumber(this);\r\n    if (x.s < 0) x.s = 1;\r\n    return x;\r\n  };\r\n\r\n\r\n  /*\r\n   * Return\r\n   *   1 if the value of this BigNumber is greater than the value of BigNumber(y, b),\r\n   *   -1 if the value of this BigNumber is less than the value of BigNumber(y, b),\r\n   *   0 if they have the same value,\r\n   *   or null if the value of either is NaN.\r\n   */\r\n  P.comparedTo = function (y, b) {\r\n    return compare(this, new BigNumber(y, b));\r\n  };\r\n\r\n\r\n  /*\r\n   * If dp is undefined or null or true or false, return the number of decimal places of the\r\n   * value of this BigNumber, or null if the value of this BigNumber is ±Infinity or NaN.\r\n   *\r\n   * Otherwise, if dp is a number, return a new BigNumber whose value is the value of this\r\n   * BigNumber rounded to a maximum of dp decimal places using rounding mode rm, or\r\n   * ROUNDING_MODE if rm is omitted.\r\n   *\r\n   * [dp] {number} Decimal places: integer, 0 to MAX inclusive.\r\n   * [rm] {number} Rounding mode. Integer, 0 to 8 inclusive.\r\n   *\r\n   * '[BigNumber Error] Argument {not a primitive number|not an integer|out of range}: {dp|rm}'\r\n   */\r\n  P.decimalPlaces = P.dp = function (dp, rm) {\r\n    var c, n, v,\r\n      x = this;\r\n\r\n    if (dp != null) {\r\n      intCheck(dp, 0, MAX);\r\n      if (rm == null) rm = ROUNDING_MODE;\r\n      else intCheck(rm, 0, 8);\r\n\r\n      return round(new BigNumber(x), dp + x.e + 1, rm);\r\n    }\r\n\r\n    if (!(c = x.c)) return null;\r\n    n = ((v = c.length - 1) - bitFloor(this.e / LOG_BASE)) * LOG_BASE;\r\n\r\n    // Subtract the number of trailing zeros of the last number.\r\n    if (v = c[v]) for (; v % 10 == 0; v /= 10, n--);\r\n    if (n < 0) n = 0;\r\n\r\n    return n;\r\n  };\r\n\r\n\r\n  /*\r\n   *  n / 0 = I\r\n   *  n / N = N\r\n   *  n / I = 0\r\n   *  0 / n = 0\r\n   *  0 / 0 = N\r\n   *  0 / N = N\r\n   *  0 / I = 0\r\n   *  N / n = N\r\n   *  N / 0 = N\r\n   *  N / N = N\r\n   *  N / I = N\r\n   *  I / n = I\r\n   *  I / 0 = I\r\n   *  I / N = N\r\n   *  I / I = N\r\n   *\r\n   * Return a new BigNumber whose value is the value of this BigNumber divided by the value of\r\n   * BigNumber(y, b), rounded according to DECIMAL_PLACES and ROUNDING_MODE.\r\n   */\r\n  P.dividedBy = P.div = function (y, b) {\r\n    return div(this, new BigNumber(y, b), DECIMAL_PLACES, ROUNDING_MODE);\r\n  };\r\n\r\n\r\n  /*\r\n   * Return a new BigNumber whose value is the integer part of dividing the value of this\r\n   * BigNumber by the value of BigNumber(y, b).\r\n   */\r\n  P.dividedToIntegerBy = P.idiv = function (y, b) {\r\n    return div(this, new BigNumber(y, b), 0, 1);\r\n  };\r\n\r\n\r\n  /*\r\n   * Return a BigNumber whose value is the value of this BigNumber exponentiated by n.\r\n   *\r\n   * If m is present, return the result modulo m.\r\n   * If n is negative round according to DECIMAL_PLACES and ROUNDING_MODE.\r\n   * If POW_PRECISION is non-zero and m is not present, round to POW_PRECISION using ROUNDING_MODE.\r\n   *\r\n   * The modular power operation works efficiently when x, n, and m are integers, otherwise it\r\n   * is equivalent to calculating x.exponentiatedBy(n).modulo(m) with a POW_PRECISION of 0.\r\n   *\r\n   * n {number|string|BigNumber} The exponent. An integer.\r\n   * [m] {number|string|BigNumber} The modulus.\r\n   *\r\n   * '[BigNumber Error] Exponent not an integer: {n}'\r\n   */\r\n  P.exponentiatedBy = P.pow = function (n, m) {\r\n    var half, isModExp, i, k, more, nIsBig, nIsNeg, nIsOdd, y,\r\n      x = this;\r\n\r\n    n = new BigNumber(n);\r\n\r\n    // Allow NaN and ±Infinity, but not other non-integers.\r\n    if (n.c && !n.isInteger()) {\r\n      throw Error\r\n        (bignumberError + 'Exponent not an integer: ' + valueOf(n));\r\n    }\r\n\r\n    if (m != null) m = new BigNumber(m);\r\n\r\n    // Exponent of MAX_SAFE_INTEGER is 15.\r\n    nIsBig = n.e > 14;\r\n\r\n    // If x is NaN, ±Infinity, ±0 or ±1, or n is ±Infinity, NaN or ±0.\r\n    if (!x.c || !x.c[0] || x.c[0] == 1 && !x.e && x.c.length == 1 || !n.c || !n.c[0]) {\r\n\r\n      // The sign of the result of pow when x is negative depends on the evenness of n.\r\n      // If +n overflows to ±Infinity, the evenness of n would be not be known.\r\n      y = new BigNumber(Math.pow(+valueOf(x), nIsBig ? 2 - isOdd(n) : +valueOf(n)));\r\n      return m ? y.mod(m) : y;\r\n    }\r\n\r\n    nIsNeg = n.s < 0;\r\n\r\n    if (m) {\r\n\r\n      // x % m returns NaN if abs(m) is zero, or m is NaN.\r\n      if (m.c ? !m.c[0] : !m.s) return new BigNumber(NaN);\r\n\r\n      isModExp = !nIsNeg && x.isInteger() && m.isInteger();\r\n\r\n      if (isModExp) x = x.mod(m);\r\n\r\n    // Overflow to ±Infinity: >=2**1e10 or >=1.0000024**1e15.\r\n    // Underflow to ±0: <=0.79**1e10 or <=0.9999975**1e15.\r\n    } else if (n.e > 9 && (x.e > 0 || x.e < -1 || (x.e == 0\r\n      // [1, 240000000]\r\n      ? x.c[0] > 1 || nIsBig && x.c[1] >= 24e7\r\n      // [80000000000000]  [99999750000000]\r\n      : x.c[0] < 8e13 || nIsBig && x.c[0] <= 9999975e7))) {\r\n\r\n      // If x is negative and n is odd, k = -0, else k = 0.\r\n      k = x.s < 0 && isOdd(n) ? -0 : 0;\r\n\r\n      // If x >= 1, k = ±Infinity.\r\n      if (x.e > -1) k = 1 / k;\r\n\r\n      // If n is negative return ±0, else return ±Infinity.\r\n      return new BigNumber(nIsNeg ? 1 / k : k);\r\n\r\n    } else if (POW_PRECISION) {\r\n\r\n      // Truncating each coefficient array to a length of k after each multiplication\r\n      // equates to truncating significant digits to POW_PRECISION + [28, 41],\r\n      // i.e. there will be a minimum of 28 guard digits retained.\r\n      k = mathceil(POW_PRECISION / LOG_BASE + 2);\r\n    }\r\n\r\n    if (nIsBig) {\r\n      half = new BigNumber(0.5);\r\n      if (nIsNeg) n.s = 1;\r\n      nIsOdd = isOdd(n);\r\n    } else {\r\n      i = Math.abs(+valueOf(n));\r\n      nIsOdd = i % 2;\r\n    }\r\n\r\n    y = new BigNumber(ONE);\r\n\r\n    // Performs 54 loop iterations for n of 9007199254740991.\r\n    for (; ;) {\r\n\r\n      if (nIsOdd) {\r\n        y = y.times(x);\r\n        if (!y.c) break;\r\n\r\n        if (k) {\r\n          if (y.c.length > k) y.c.length = k;\r\n        } else if (isModExp) {\r\n          y = y.mod(m);    //y = y.minus(div(y, m, 0, MODULO_MODE).times(m));\r\n        }\r\n      }\r\n\r\n      if (i) {\r\n        i = mathfloor(i / 2);\r\n        if (i === 0) break;\r\n        nIsOdd = i % 2;\r\n      } else {\r\n        n = n.times(half);\r\n        round(n, n.e + 1, 1);\r\n\r\n        if (n.e > 14) {\r\n          nIsOdd = isOdd(n);\r\n        } else {\r\n          i = +valueOf(n);\r\n          if (i === 0) break;\r\n          nIsOdd = i % 2;\r\n        }\r\n      }\r\n\r\n      x = x.times(x);\r\n\r\n      if (k) {\r\n        if (x.c && x.c.length > k) x.c.length = k;\r\n      } else if (isModExp) {\r\n        x = x.mod(m);    //x = x.minus(div(x, m, 0, MODULO_MODE).times(m));\r\n      }\r\n    }\r\n\r\n    if (isModExp) return y;\r\n    if (nIsNeg) y = ONE.div(y);\r\n\r\n    return m ? y.mod(m) : k ? round(y, POW_PRECISION, ROUNDING_MODE, more) : y;\r\n  };\r\n\r\n\r\n  /*\r\n   * Return a new BigNumber whose value is the value of this BigNumber rounded to an integer\r\n   * using rounding mode rm, or ROUNDING_MODE if rm is omitted.\r\n   *\r\n   * [rm] {number} Rounding mode. Integer, 0 to 8 inclusive.\r\n   *\r\n   * '[BigNumber Error] Argument {not a primitive number|not an integer|out of range}: {rm}'\r\n   */\r\n  P.integerValue = function (rm) {\r\n    var n = new BigNumber(this);\r\n    if (rm == null) rm = ROUNDING_MODE;\r\n    else intCheck(rm, 0, 8);\r\n    return round(n, n.e + 1, rm);\r\n  };\r\n\r\n\r\n  /*\r\n   * Return true if the value of this BigNumber is equal to the value of BigNumber(y, b),\r\n   * otherwise return false.\r\n   */\r\n  P.isEqualTo = P.eq = function (y, b) {\r\n    return compare(this, new BigNumber(y, b)) === 0;\r\n  };\r\n\r\n\r\n  /*\r\n   * Return true if the value of this BigNumber is a finite number, otherwise return false.\r\n   */\r\n  P.isFinite = function () {\r\n    return !!this.c;\r\n  };\r\n\r\n\r\n  /*\r\n   * Return true if the value of this BigNumber is greater than the value of BigNumber(y, b),\r\n   * otherwise return false.\r\n   */\r\n  P.isGreaterThan = P.gt = function (y, b) {\r\n    return compare(this, new BigNumber(y, b)) > 0;\r\n  };\r\n\r\n\r\n  /*\r\n   * Return true if the value of this BigNumber is greater than or equal to the value of\r\n   * BigNumber(y, b), otherwise return false.\r\n   */\r\n  P.isGreaterThanOrEqualTo = P.gte = function (y, b) {\r\n    return (b = compare(this, new BigNumber(y, b))) === 1 || b === 0;\r\n\r\n  };\r\n\r\n\r\n  /*\r\n   * Return true if the value of this BigNumber is an integer, otherwise return false.\r\n   */\r\n  P.isInteger = function () {\r\n    return !!this.c && bitFloor(this.e / LOG_BASE) > this.c.length - 2;\r\n  };\r\n\r\n\r\n  /*\r\n   * Return true if the value of this BigNumber is less than the value of BigNumber(y, b),\r\n   * otherwise return false.\r\n   */\r\n  P.isLessThan = P.lt = function (y, b) {\r\n    return compare(this, new BigNumber(y, b)) < 0;\r\n  };\r\n\r\n\r\n  /*\r\n   * Return true if the value of this BigNumber is less than or equal to the value of\r\n   * BigNumber(y, b), otherwise return false.\r\n   */\r\n  P.isLessThanOrEqualTo = P.lte = function (y, b) {\r\n    return (b = compare(this, new BigNumber(y, b))) === -1 || b === 0;\r\n  };\r\n\r\n\r\n  /*\r\n   * Return true if the value of this BigNumber is NaN, otherwise return false.\r\n   */\r\n  P.isNaN = function () {\r\n    return !this.s;\r\n  };\r\n\r\n\r\n  /*\r\n   * Return true if the value of this BigNumber is negative, otherwise return false.\r\n   */\r\n  P.isNegative = function () {\r\n    return this.s < 0;\r\n  };\r\n\r\n\r\n  /*\r\n   * Return true if the value of this BigNumber is positive, otherwise return false.\r\n   */\r\n  P.isPositive = function () {\r\n    return this.s > 0;\r\n  };\r\n\r\n\r\n  /*\r\n   * Return true if the value of this BigNumber is 0 or -0, otherwise return false.\r\n   */\r\n  P.isZero = function () {\r\n    return !!this.c && this.c[0] == 0;\r\n  };\r\n\r\n\r\n  /*\r\n   *  n - 0 = n\r\n   *  n - N = N\r\n   *  n - I = -I\r\n   *  0 - n = -n\r\n   *  0 - 0 = 0\r\n   *  0 - N = N\r\n   *  0 - I = -I\r\n   *  N - n = N\r\n   *  N - 0 = N\r\n   *  N - N = N\r\n   *  N - I = N\r\n   *  I - n = I\r\n   *  I - 0 = I\r\n   *  I - N = N\r\n   *  I - I = N\r\n   *\r\n   * Return a new BigNumber whose value is the value of this BigNumber minus the value of\r\n   * BigNumber(y, b).\r\n   */\r\n  P.minus = function (y, b) {\r\n    var i, j, t, xLTy,\r\n      x = this,\r\n      a = x.s;\r\n\r\n    y = new BigNumber(y, b);\r\n    b = y.s;\r\n\r\n    // Either NaN?\r\n    if (!a || !b) return new BigNumber(NaN);\r\n\r\n    // Signs differ?\r\n    if (a != b) {\r\n      y.s = -b;\r\n      return x.plus(y);\r\n    }\r\n\r\n    var xe = x.e / LOG_BASE,\r\n      ye = y.e / LOG_BASE,\r\n      xc = x.c,\r\n      yc = y.c;\r\n\r\n    if (!xe || !ye) {\r\n\r\n      // Either Infinity?\r\n      if (!xc || !yc) return xc ? (y.s = -b, y) : new BigNumber(yc ? x : NaN);\r\n\r\n      // Either zero?\r\n      if (!xc[0] || !yc[0]) {\r\n\r\n        // Return y if y is non-zero, x if x is non-zero, or zero if both are zero.\r\n        return yc[0] ? (y.s = -b, y) : new BigNumber(xc[0] ? x :\r\n\r\n         // IEEE 754 (2008) 6.3: n - n = -0 when rounding to -Infinity\r\n         ROUNDING_MODE == 3 ? -0 : 0);\r\n      }\r\n    }\r\n\r\n    xe = bitFloor(xe);\r\n    ye = bitFloor(ye);\r\n    xc = xc.slice();\r\n\r\n    // Determine which is the bigger number.\r\n    if (a = xe - ye) {\r\n\r\n      if (xLTy = a < 0) {\r\n        a = -a;\r\n        t = xc;\r\n      } else {\r\n        ye = xe;\r\n        t = yc;\r\n      }\r\n\r\n      t.reverse();\r\n\r\n      // Prepend zeros to equalise exponents.\r\n      for (b = a; b--; t.push(0));\r\n      t.reverse();\r\n    } else {\r\n\r\n      // Exponents equal. Check digit by digit.\r\n      j = (xLTy = (a = xc.length) < (b = yc.length)) ? a : b;\r\n\r\n      for (a = b = 0; b < j; b++) {\r\n\r\n        if (xc[b] != yc[b]) {\r\n          xLTy = xc[b] < yc[b];\r\n          break;\r\n        }\r\n      }\r\n    }\r\n\r\n    // x < y? Point xc to the array of the bigger number.\r\n    if (xLTy) t = xc, xc = yc, yc = t, y.s = -y.s;\r\n\r\n    b = (j = yc.length) - (i = xc.length);\r\n\r\n    // Append zeros to xc if shorter.\r\n    // No need to add zeros to yc if shorter as subtract only needs to start at yc.length.\r\n    if (b > 0) for (; b--; xc[i++] = 0);\r\n    b = BASE - 1;\r\n\r\n    // Subtract yc from xc.\r\n    for (; j > a;) {\r\n\r\n      if (xc[--j] < yc[j]) {\r\n        for (i = j; i && !xc[--i]; xc[i] = b);\r\n        --xc[i];\r\n        xc[j] += BASE;\r\n      }\r\n\r\n      xc[j] -= yc[j];\r\n    }\r\n\r\n    // Remove leading zeros and adjust exponent accordingly.\r\n    for (; xc[0] == 0; xc.splice(0, 1), --ye);\r\n\r\n    // Zero?\r\n    if (!xc[0]) {\r\n\r\n      // Following IEEE 754 (2008) 6.3,\r\n      // n - n = +0  but  n - n = -0  when rounding towards -Infinity.\r\n      y.s = ROUNDING_MODE == 3 ? -1 : 1;\r\n      y.c = [y.e = 0];\r\n      return y;\r\n    }\r\n\r\n    // No need to check for Infinity as +x - +y != Infinity && -x - -y != Infinity\r\n    // for finite x and y.\r\n    return normalise(y, xc, ye);\r\n  };\r\n\r\n\r\n  /*\r\n   *   n % 0 =  N\r\n   *   n % N =  N\r\n   *   n % I =  n\r\n   *   0 % n =  0\r\n   *  -0 % n = -0\r\n   *   0 % 0 =  N\r\n   *   0 % N =  N\r\n   *   0 % I =  0\r\n   *   N % n =  N\r\n   *   N % 0 =  N\r\n   *   N % N =  N\r\n   *   N % I =  N\r\n   *   I % n =  N\r\n   *   I % 0 =  N\r\n   *   I % N =  N\r\n   *   I % I =  N\r\n   *\r\n   * Return a new BigNumber whose value is the value of this BigNumber modulo the value of\r\n   * BigNumber(y, b). The result depends on the value of MODULO_MODE.\r\n   */\r\n  P.modulo = P.mod = function (y, b) {\r\n    var q, s,\r\n      x = this;\r\n\r\n    y = new BigNumber(y, b);\r\n\r\n    // Return NaN if x is Infinity or NaN, or y is NaN or zero.\r\n    if (!x.c || !y.s || y.c && !y.c[0]) {\r\n      return new BigNumber(NaN);\r\n\r\n    // Return x if y is Infinity or x is zero.\r\n    } else if (!y.c || x.c && !x.c[0]) {\r\n      return new BigNumber(x);\r\n    }\r\n\r\n    if (MODULO_MODE == 9) {\r\n\r\n      // Euclidian division: q = sign(y) * floor(x / abs(y))\r\n      // r = x - qy    where  0 <= r < abs(y)\r\n      s = y.s;\r\n      y.s = 1;\r\n      q = div(x, y, 0, 3);\r\n      y.s = s;\r\n      q.s *= s;\r\n    } else {\r\n      q = div(x, y, 0, MODULO_MODE);\r\n    }\r\n\r\n    y = x.minus(q.times(y));\r\n\r\n    // To match JavaScript %, ensure sign of zero is sign of dividend.\r\n    if (!y.c[0] && MODULO_MODE == 1) y.s = x.s;\r\n\r\n    return y;\r\n  };\r\n\r\n\r\n  /*\r\n   *  n * 0 = 0\r\n   *  n * N = N\r\n   *  n * I = I\r\n   *  0 * n = 0\r\n   *  0 * 0 = 0\r\n   *  0 * N = N\r\n   *  0 * I = N\r\n   *  N * n = N\r\n   *  N * 0 = N\r\n   *  N * N = N\r\n   *  N * I = N\r\n   *  I * n = I\r\n   *  I * 0 = N\r\n   *  I * N = N\r\n   *  I * I = I\r\n   *\r\n   * Return a new BigNumber whose value is the value of this BigNumber multiplied by the value\r\n   * of BigNumber(y, b).\r\n   */\r\n  P.multipliedBy = P.times = function (y, b) {\r\n    var c, e, i, j, k, m, xcL, xlo, xhi, ycL, ylo, yhi, zc,\r\n      base, sqrtBase,\r\n      x = this,\r\n      xc = x.c,\r\n      yc = (y = new BigNumber(y, b)).c;\r\n\r\n    // Either NaN, ±Infinity or ±0?\r\n    if (!xc || !yc || !xc[0] || !yc[0]) {\r\n\r\n      // Return NaN if either is NaN, or one is 0 and the other is Infinity.\r\n      if (!x.s || !y.s || xc && !xc[0] && !yc || yc && !yc[0] && !xc) {\r\n        y.c = y.e = y.s = null;\r\n      } else {\r\n        y.s *= x.s;\r\n\r\n        // Return ±Infinity if either is ±Infinity.\r\n        if (!xc || !yc) {\r\n          y.c = y.e = null;\r\n\r\n        // Return ±0 if either is ±0.\r\n        } else {\r\n          y.c = [0];\r\n          y.e = 0;\r\n        }\r\n      }\r\n\r\n      return y;\r\n    }\r\n\r\n    e = bitFloor(x.e / LOG_BASE) + bitFloor(y.e / LOG_BASE);\r\n    y.s *= x.s;\r\n    xcL = xc.length;\r\n    ycL = yc.length;\r\n\r\n    // Ensure xc points to longer array and xcL to its length.\r\n    if (xcL < ycL) zc = xc, xc = yc, yc = zc, i = xcL, xcL = ycL, ycL = i;\r\n\r\n    // Initialise the result array with zeros.\r\n    for (i = xcL + ycL, zc = []; i--; zc.push(0));\r\n\r\n    base = BASE;\r\n    sqrtBase = SQRT_BASE;\r\n\r\n    for (i = ycL; --i >= 0;) {\r\n      c = 0;\r\n      ylo = yc[i] % sqrtBase;\r\n      yhi = yc[i] / sqrtBase | 0;\r\n\r\n      for (k = xcL, j = i + k; j > i;) {\r\n        xlo = xc[--k] % sqrtBase;\r\n        xhi = xc[k] / sqrtBase | 0;\r\n        m = yhi * xlo + xhi * ylo;\r\n        xlo = ylo * xlo + ((m % sqrtBase) * sqrtBase) + zc[j] + c;\r\n        c = (xlo / base | 0) + (m / sqrtBase | 0) + yhi * xhi;\r\n        zc[j--] = xlo % base;\r\n      }\r\n\r\n      zc[j] = c;\r\n    }\r\n\r\n    if (c) {\r\n      ++e;\r\n    } else {\r\n      zc.splice(0, 1);\r\n    }\r\n\r\n    return normalise(y, zc, e);\r\n  };\r\n\r\n\r\n  /*\r\n   * Return a new BigNumber whose value is the value of this BigNumber negated,\r\n   * i.e. multiplied by -1.\r\n   */\r\n  P.negated = function () {\r\n    var x = new BigNumber(this);\r\n    x.s = -x.s || null;\r\n    return x;\r\n  };\r\n\r\n\r\n  /*\r\n   *  n + 0 = n\r\n   *  n + N = N\r\n   *  n + I = I\r\n   *  0 + n = n\r\n   *  0 + 0 = 0\r\n   *  0 + N = N\r\n   *  0 + I = I\r\n   *  N + n = N\r\n   *  N + 0 = N\r\n   *  N + N = N\r\n   *  N + I = N\r\n   *  I + n = I\r\n   *  I + 0 = I\r\n   *  I + N = N\r\n   *  I + I = I\r\n   *\r\n   * Return a new BigNumber whose value is the value of this BigNumber plus the value of\r\n   * BigNumber(y, b).\r\n   */\r\n  P.plus = function (y, b) {\r\n    var t,\r\n      x = this,\r\n      a = x.s;\r\n\r\n    y = new BigNumber(y, b);\r\n    b = y.s;\r\n\r\n    // Either NaN?\r\n    if (!a || !b) return new BigNumber(NaN);\r\n\r\n    // Signs differ?\r\n     if (a != b) {\r\n      y.s = -b;\r\n      return x.minus(y);\r\n    }\r\n\r\n    var xe = x.e / LOG_BASE,\r\n      ye = y.e / LOG_BASE,\r\n      xc = x.c,\r\n      yc = y.c;\r\n\r\n    if (!xe || !ye) {\r\n\r\n      // Return ±Infinity if either ±Infinity.\r\n      if (!xc || !yc) return new BigNumber(a / 0);\r\n\r\n      // Either zero?\r\n      // Return y if y is non-zero, x if x is non-zero, or zero if both are zero.\r\n      if (!xc[0] || !yc[0]) return yc[0] ? y : new BigNumber(xc[0] ? x : a * 0);\r\n    }\r\n\r\n    xe = bitFloor(xe);\r\n    ye = bitFloor(ye);\r\n    xc = xc.slice();\r\n\r\n    // Prepend zeros to equalise exponents. Faster to use reverse then do unshifts.\r\n    if (a = xe - ye) {\r\n      if (a > 0) {\r\n        ye = xe;\r\n        t = yc;\r\n      } else {\r\n        a = -a;\r\n        t = xc;\r\n      }\r\n\r\n      t.reverse();\r\n      for (; a--; t.push(0));\r\n      t.reverse();\r\n    }\r\n\r\n    a = xc.length;\r\n    b = yc.length;\r\n\r\n    // Point xc to the longer array, and b to the shorter length.\r\n    if (a - b < 0) t = yc, yc = xc, xc = t, b = a;\r\n\r\n    // Only start adding at yc.length - 1 as the further digits of xc can be ignored.\r\n    for (a = 0; b;) {\r\n      a = (xc[--b] = xc[b] + yc[b] + a) / BASE | 0;\r\n      xc[b] = BASE === xc[b] ? 0 : xc[b] % BASE;\r\n    }\r\n\r\n    if (a) {\r\n      xc = [a].concat(xc);\r\n      ++ye;\r\n    }\r\n\r\n    // No need to check for zero, as +x + +y != 0 && -x + -y != 0\r\n    // ye = MAX_EXP + 1 possible\r\n    return normalise(y, xc, ye);\r\n  };\r\n\r\n\r\n  /*\r\n   * If sd is undefined or null or true or false, return the number of significant digits of\r\n   * the value of this BigNumber, or null if the value of this BigNumber is ±Infinity or NaN.\r\n   * If sd is true include integer-part trailing zeros in the count.\r\n   *\r\n   * Otherwise, if sd is a number, return a new BigNumber whose value is the value of this\r\n   * BigNumber rounded to a maximum of sd significant digits using rounding mode rm, or\r\n   * ROUNDING_MODE if rm is omitted.\r\n   *\r\n   * sd {number|boolean} number: significant digits: integer, 1 to MAX inclusive.\r\n   *                     boolean: whether to count integer-part trailing zeros: true or false.\r\n   * [rm] {number} Rounding mode. Integer, 0 to 8 inclusive.\r\n   *\r\n   * '[BigNumber Error] Argument {not a primitive number|not an integer|out of range}: {sd|rm}'\r\n   */\r\n  P.precision = P.sd = function (sd, rm) {\r\n    var c, n, v,\r\n      x = this;\r\n\r\n    if (sd != null && sd !== !!sd) {\r\n      intCheck(sd, 1, MAX);\r\n      if (rm == null) rm = ROUNDING_MODE;\r\n      else intCheck(rm, 0, 8);\r\n\r\n      return round(new BigNumber(x), sd, rm);\r\n    }\r\n\r\n    if (!(c = x.c)) return null;\r\n    v = c.length - 1;\r\n    n = v * LOG_BASE + 1;\r\n\r\n    if (v = c[v]) {\r\n\r\n      // Subtract the number of trailing zeros of the last element.\r\n      for (; v % 10 == 0; v /= 10, n--);\r\n\r\n      // Add the number of digits of the first element.\r\n      for (v = c[0]; v >= 10; v /= 10, n++);\r\n    }\r\n\r\n    if (sd && x.e + 1 > n) n = x.e + 1;\r\n\r\n    return n;\r\n  };\r\n\r\n\r\n  /*\r\n   * Return a new BigNumber whose value is the value of this BigNumber shifted by k places\r\n   * (powers of 10). Shift to the right if n > 0, and to the left if n < 0.\r\n   *\r\n   * k {number} Integer, -MAX_SAFE_INTEGER to MAX_SAFE_INTEGER inclusive.\r\n   *\r\n   * '[BigNumber Error] Argument {not a primitive number|not an integer|out of range}: {k}'\r\n   */\r\n  P.shiftedBy = function (k) {\r\n    intCheck(k, -MAX_SAFE_INTEGER, MAX_SAFE_INTEGER);\r\n    return this.times('1e' + k);\r\n  };\r\n\r\n\r\n  /*\r\n   *  sqrt(-n) =  N\r\n   *  sqrt(N) =  N\r\n   *  sqrt(-I) =  N\r\n   *  sqrt(I) =  I\r\n   *  sqrt(0) =  0\r\n   *  sqrt(-0) = -0\r\n   *\r\n   * Return a new BigNumber whose value is the square root of the value of this BigNumber,\r\n   * rounded according to DECIMAL_PLACES and ROUNDING_MODE.\r\n   */\r\n  P.squareRoot = P.sqrt = function () {\r\n    var m, n, r, rep, t,\r\n      x = this,\r\n      c = x.c,\r\n      s = x.s,\r\n      e = x.e,\r\n      dp = DECIMAL_PLACES + 4,\r\n      half = new BigNumber('0.5');\r\n\r\n    // Negative/NaN/Infinity/zero?\r\n    if (s !== 1 || !c || !c[0]) {\r\n      return new BigNumber(!s || s < 0 && (!c || c[0]) ? NaN : c ? x : 1 / 0);\r\n    }\r\n\r\n    // Initial estimate.\r\n    s = Math.sqrt(+valueOf(x));\r\n\r\n    // Math.sqrt underflow/overflow?\r\n    // Pass x to Math.sqrt as integer, then adjust the exponent of the result.\r\n    if (s == 0 || s == 1 / 0) {\r\n      n = coeffToString(c);\r\n      if ((n.length + e) % 2 == 0) n += '0';\r\n      s = Math.sqrt(+n);\r\n      e = bitFloor((e + 1) / 2) - (e < 0 || e % 2);\r\n\r\n      if (s == 1 / 0) {\r\n        n = '5e' + e;\r\n      } else {\r\n        n = s.toExponential();\r\n        n = n.slice(0, n.indexOf('e') + 1) + e;\r\n      }\r\n\r\n      r = new BigNumber(n);\r\n    } else {\r\n      r = new BigNumber(s + '');\r\n    }\r\n\r\n    // Check for zero.\r\n    // r could be zero if MIN_EXP is changed after the this value was created.\r\n    // This would cause a division by zero (x/t) and hence Infinity below, which would cause\r\n    // coeffToString to throw.\r\n    if (r.c[0]) {\r\n      e = r.e;\r\n      s = e + dp;\r\n      if (s < 3) s = 0;\r\n\r\n      // Newton-Raphson iteration.\r\n      for (; ;) {\r\n        t = r;\r\n        r = half.times(t.plus(div(x, t, dp, 1)));\r\n\r\n        if (coeffToString(t.c).slice(0, s) === (n = coeffToString(r.c)).slice(0, s)) {\r\n\r\n          // The exponent of r may here be one less than the final result exponent,\r\n          // e.g 0.0009999 (e-4) --> 0.001 (e-3), so adjust s so the rounding digits\r\n          // are indexed correctly.\r\n          if (r.e < e) --s;\r\n          n = n.slice(s - 3, s + 1);\r\n\r\n          // The 4th rounding digit may be in error by -1 so if the 4 rounding digits\r\n          // are 9999 or 4999 (i.e. approaching a rounding boundary) continue the\r\n          // iteration.\r\n          if (n == '9999' || !rep && n == '4999') {\r\n\r\n            // On the first iteration only, check to see if rounding up gives the\r\n            // exact result as the nines may infinitely repeat.\r\n            if (!rep) {\r\n              round(t, t.e + DECIMAL_PLACES + 2, 0);\r\n\r\n              if (t.times(t).eq(x)) {\r\n                r = t;\r\n                break;\r\n              }\r\n            }\r\n\r\n            dp += 4;\r\n            s += 4;\r\n            rep = 1;\r\n          } else {\r\n\r\n            // If rounding digits are null, 0{0,4} or 50{0,3}, check for exact\r\n            // result. If not, then there are further digits and m will be truthy.\r\n            if (!+n || !+n.slice(1) && n.charAt(0) == '5') {\r\n\r\n              // Truncate to the first rounding digit.\r\n              round(r, r.e + DECIMAL_PLACES + 2, 1);\r\n              m = !r.times(r).eq(x);\r\n            }\r\n\r\n            break;\r\n          }\r\n        }\r\n      }\r\n    }\r\n\r\n    return round(r, r.e + DECIMAL_PLACES + 1, ROUNDING_MODE, m);\r\n  };\r\n\r\n\r\n  /*\r\n   * Return a string representing the value of this BigNumber in exponential notation and\r\n   * rounded using ROUNDING_MODE to dp fixed decimal places.\r\n   *\r\n   * [dp] {number} Decimal places. Integer, 0 to MAX inclusive.\r\n   * [rm] {number} Rounding mode. Integer, 0 to 8 inclusive.\r\n   *\r\n   * '[BigNumber Error] Argument {not a primitive number|not an integer|out of range}: {dp|rm}'\r\n   */\r\n  P.toExponential = function (dp, rm) {\r\n    if (dp != null) {\r\n      intCheck(dp, 0, MAX);\r\n      dp++;\r\n    }\r\n    return format(this, dp, rm, 1);\r\n  };\r\n\r\n\r\n  /*\r\n   * Return a string representing the value of this BigNumber in fixed-point notation rounding\r\n   * to dp fixed decimal places using rounding mode rm, or ROUNDING_MODE if rm is omitted.\r\n   *\r\n   * Note: as with JavaScript's number type, (-0).toFixed(0) is '0',\r\n   * but e.g. (-0.00001).toFixed(0) is '-0'.\r\n   *\r\n   * [dp] {number} Decimal places. Integer, 0 to MAX inclusive.\r\n   * [rm] {number} Rounding mode. Integer, 0 to 8 inclusive.\r\n   *\r\n   * '[BigNumber Error] Argument {not a primitive number|not an integer|out of range}: {dp|rm}'\r\n   */\r\n  P.toFixed = function (dp, rm) {\r\n    if (dp != null) {\r\n      intCheck(dp, 0, MAX);\r\n      dp = dp + this.e + 1;\r\n    }\r\n    return format(this, dp, rm);\r\n  };\r\n\r\n\r\n  /*\r\n   * Return a string representing the value of this BigNumber in fixed-point notation rounded\r\n   * using rm or ROUNDING_MODE to dp decimal places, and formatted according to the properties\r\n   * of the format or FORMAT object (see BigNumber.set).\r\n   *\r\n   * The formatting object may contain some or all of the properties shown below.\r\n   *\r\n   * FORMAT = {\r\n   *   prefix: '',\r\n   *   groupSize: 3,\r\n   *   secondaryGroupSize: 0,\r\n   *   groupSeparator: ',',\r\n   *   decimalSeparator: '.',\r\n   *   fractionGroupSize: 0,\r\n   *   fractionGroupSeparator: '\\xA0',      // non-breaking space\r\n   *   suffix: ''\r\n   * };\r\n   *\r\n   * [dp] {number} Decimal places. Integer, 0 to MAX inclusive.\r\n   * [rm] {number} Rounding mode. Integer, 0 to 8 inclusive.\r\n   * [format] {object} Formatting options. See FORMAT pbject above.\r\n   *\r\n   * '[BigNumber Error] Argument {not a primitive number|not an integer|out of range}: {dp|rm}'\r\n   * '[BigNumber Error] Argument not an object: {format}'\r\n   */\r\n  P.toFormat = function (dp, rm, format) {\r\n    var str,\r\n      x = this;\r\n\r\n    if (format == null) {\r\n      if (dp != null && rm && typeof rm == 'object') {\r\n        format = rm;\r\n        rm = null;\r\n      } else if (dp && typeof dp == 'object') {\r\n        format = dp;\r\n        dp = rm = null;\r\n      } else {\r\n        format = FORMAT;\r\n      }\r\n    } else if (typeof format != 'object') {\r\n      throw Error\r\n        (bignumberError + 'Argument not an object: ' + format);\r\n    }\r\n\r\n    str = x.toFixed(dp, rm);\r\n\r\n    if (x.c) {\r\n      var i,\r\n        arr = str.split('.'),\r\n        g1 = +format.groupSize,\r\n        g2 = +format.secondaryGroupSize,\r\n        groupSeparator = format.groupSeparator || '',\r\n        intPart = arr[0],\r\n        fractionPart = arr[1],\r\n        isNeg = x.s < 0,\r\n        intDigits = isNeg ? intPart.slice(1) : intPart,\r\n        len = intDigits.length;\r\n\r\n      if (g2) i = g1, g1 = g2, g2 = i, len -= i;\r\n\r\n      if (g1 > 0 && len > 0) {\r\n        i = len % g1 || g1;\r\n        intPart = intDigits.substr(0, i);\r\n        for (; i < len; i += g1) intPart += groupSeparator + intDigits.substr(i, g1);\r\n        if (g2 > 0) intPart += groupSeparator + intDigits.slice(i);\r\n        if (isNeg) intPart = '-' + intPart;\r\n      }\r\n\r\n      str = fractionPart\r\n       ? intPart + (format.decimalSeparator || '') + ((g2 = +format.fractionGroupSize)\r\n        ? fractionPart.replace(new RegExp('\\\\d{' + g2 + '}\\\\B', 'g'),\r\n         '$&' + (format.fractionGroupSeparator || ''))\r\n        : fractionPart)\r\n       : intPart;\r\n    }\r\n\r\n    return (format.prefix || '') + str + (format.suffix || '');\r\n  };\r\n\r\n\r\n  /*\r\n   * Return an array of two BigNumbers representing the value of this BigNumber as a simple\r\n   * fraction with an integer numerator and an integer denominator.\r\n   * The denominator will be a positive non-zero value less than or equal to the specified\r\n   * maximum denominator. If a maximum denominator is not specified, the denominator will be\r\n   * the lowest value necessary to represent the number exactly.\r\n   *\r\n   * [md] {number|string|BigNumber} Integer >= 1, or Infinity. The maximum denominator.\r\n   *\r\n   * '[BigNumber Error] Argument {not an integer|out of range} : {md}'\r\n   */\r\n  P.toFraction = function (md) {\r\n    var d, d0, d1, d2, e, exp, n, n0, n1, q, r, s,\r\n      x = this,\r\n      xc = x.c;\r\n\r\n    if (md != null) {\r\n      n = new BigNumber(md);\r\n\r\n      // Throw if md is less than one or is not an integer, unless it is Infinity.\r\n      if (!n.isInteger() && (n.c || n.s !== 1) || n.lt(ONE)) {\r\n        throw Error\r\n          (bignumberError + 'Argument ' +\r\n            (n.isInteger() ? 'out of range: ' : 'not an integer: ') + valueOf(n));\r\n      }\r\n    }\r\n\r\n    if (!xc) return new BigNumber(x);\r\n\r\n    d = new BigNumber(ONE);\r\n    n1 = d0 = new BigNumber(ONE);\r\n    d1 = n0 = new BigNumber(ONE);\r\n    s = coeffToString(xc);\r\n\r\n    // Determine initial denominator.\r\n    // d is a power of 10 and the minimum max denominator that specifies the value exactly.\r\n    e = d.e = s.length - x.e - 1;\r\n    d.c[0] = POWS_TEN[(exp = e % LOG_BASE) < 0 ? LOG_BASE + exp : exp];\r\n    md = !md || n.comparedTo(d) > 0 ? (e > 0 ? d : n1) : n;\r\n\r\n    exp = MAX_EXP;\r\n    MAX_EXP = 1 / 0;\r\n    n = new BigNumber(s);\r\n\r\n    // n0 = d1 = 0\r\n    n0.c[0] = 0;\r\n\r\n    for (; ;)  {\r\n      q = div(n, d, 0, 1);\r\n      d2 = d0.plus(q.times(d1));\r\n      if (d2.comparedTo(md) == 1) break;\r\n      d0 = d1;\r\n      d1 = d2;\r\n      n1 = n0.plus(q.times(d2 = n1));\r\n      n0 = d2;\r\n      d = n.minus(q.times(d2 = d));\r\n      n = d2;\r\n    }\r\n\r\n    d2 = div(md.minus(d0), d1, 0, 1);\r\n    n0 = n0.plus(d2.times(n1));\r\n    d0 = d0.plus(d2.times(d1));\r\n    n0.s = n1.s = x.s;\r\n    e = e * 2;\r\n\r\n    // Determine which fraction is closer to x, n0/d0 or n1/d1\r\n    r = div(n1, d1, e, ROUNDING_MODE).minus(x).abs().comparedTo(\r\n        div(n0, d0, e, ROUNDING_MODE).minus(x).abs()) < 1 ? [n1, d1] : [n0, d0];\r\n\r\n    MAX_EXP = exp;\r\n\r\n    return r;\r\n  };\r\n\r\n\r\n  /*\r\n   * Return the value of this BigNumber converted to a number primitive.\r\n   */\r\n  P.toNumber = function () {\r\n    return +valueOf(this);\r\n  };\r\n\r\n\r\n  /*\r\n   * Return a string representing the value of this BigNumber rounded to sd significant digits\r\n   * using rounding mode rm or ROUNDING_MODE. If sd is less than the number of digits\r\n   * necessary to represent the integer part of the value in fixed-point notation, then use\r\n   * exponential notation.\r\n   *\r\n   * [sd] {number} Significant digits. Integer, 1 to MAX inclusive.\r\n   * [rm] {number} Rounding mode. Integer, 0 to 8 inclusive.\r\n   *\r\n   * '[BigNumber Error] Argument {not a primitive number|not an integer|out of range}: {sd|rm}'\r\n   */\r\n  P.toPrecision = function (sd, rm) {\r\n    if (sd != null) intCheck(sd, 1, MAX);\r\n    return format(this, sd, rm, 2);\r\n  };\r\n\r\n\r\n  /*\r\n   * Return a string representing the value of this BigNumber in base b, or base 10 if b is\r\n   * omitted. If a base is specified, including base 10, round according to DECIMAL_PLACES and\r\n   * ROUNDING_MODE. If a base is not specified, and this BigNumber has a positive exponent\r\n   * that is equal to or greater than TO_EXP_POS, or a negative exponent equal to or less than\r\n   * TO_EXP_NEG, return exponential notation.\r\n   *\r\n   * [b] {number} Integer, 2 to ALPHABET.length inclusive.\r\n   *\r\n   * '[BigNumber Error] Base {not a primitive number|not an integer|out of range}: {b}'\r\n   */\r\n  P.toString = function (b) {\r\n    var str,\r\n      n = this,\r\n      s = n.s,\r\n      e = n.e;\r\n\r\n    // Infinity or NaN?\r\n    if (e === null) {\r\n      if (s) {\r\n        str = 'Infinity';\r\n        if (s < 0) str = '-' + str;\r\n      } else {\r\n        str = 'NaN';\r\n      }\r\n    } else {\r\n      if (b == null) {\r\n        str = e <= TO_EXP_NEG || e >= TO_EXP_POS\r\n         ? toExponential(coeffToString(n.c), e)\r\n         : toFixedPoint(coeffToString(n.c), e, '0');\r\n      } else if (b === 10) {\r\n        n = round(new BigNumber(n), DECIMAL_PLACES + e + 1, ROUNDING_MODE);\r\n        str = toFixedPoint(coeffToString(n.c), n.e, '0');\r\n      } else {\r\n        intCheck(b, 2, ALPHABET.length, 'Base');\r\n        str = convertBase(toFixedPoint(coeffToString(n.c), e, '0'), 10, b, s, true);\r\n      }\r\n\r\n      if (s < 0 && n.c[0]) str = '-' + str;\r\n    }\r\n\r\n    return str;\r\n  };\r\n\r\n\r\n  /*\r\n   * Return as toString, but do not accept a base argument, and include the minus sign for\r\n   * negative zero.\r\n   */\r\n  P.valueOf = P.toJSON = function () {\r\n    return valueOf(this);\r\n  };\r\n\r\n\r\n  P._isBigNumber = true;\r\n\r\n  P[Symbol.toStringTag] = 'BigNumber';\r\n\r\n  // Node.js v10.12.0+\r\n  P[Symbol.for('nodejs.util.inspect.custom')] = P.valueOf;\r\n\r\n  if (configObject != null) BigNumber.set(configObject);\r\n\r\n  return BigNumber;\r\n}\r\n\r\n\r\n// PRIVATE HELPER FUNCTIONS\r\n\r\n// These functions don't need access to variables,\r\n// e.g. DECIMAL_PLACES, in the scope of the `clone` function above.\r\n\r\n\r\nfunction bitFloor(n) {\r\n  var i = n | 0;\r\n  return n > 0 || n === i ? i : i - 1;\r\n}\r\n\r\n\r\n// Return a coefficient array as a string of base 10 digits.\r\nfunction coeffToString(a) {\r\n  var s, z,\r\n    i = 1,\r\n    j = a.length,\r\n    r = a[0] + '';\r\n\r\n  for (; i < j;) {\r\n    s = a[i++] + '';\r\n    z = LOG_BASE - s.length;\r\n    for (; z--; s = '0' + s);\r\n    r += s;\r\n  }\r\n\r\n  // Determine trailing zeros.\r\n  for (j = r.length; r.charCodeAt(--j) === 48;);\r\n\r\n  return r.slice(0, j + 1 || 1);\r\n}\r\n\r\n\r\n// Compare the value of BigNumbers x and y.\r\nfunction compare(x, y) {\r\n  var a, b,\r\n    xc = x.c,\r\n    yc = y.c,\r\n    i = x.s,\r\n    j = y.s,\r\n    k = x.e,\r\n    l = y.e;\r\n\r\n  // Either NaN?\r\n  if (!i || !j) return null;\r\n\r\n  a = xc && !xc[0];\r\n  b = yc && !yc[0];\r\n\r\n  // Either zero?\r\n  if (a || b) return a ? b ? 0 : -j : i;\r\n\r\n  // Signs differ?\r\n  if (i != j) return i;\r\n\r\n  a = i < 0;\r\n  b = k == l;\r\n\r\n  // Either Infinity?\r\n  if (!xc || !yc) return b ? 0 : !xc ^ a ? 1 : -1;\r\n\r\n  // Compare exponents.\r\n  if (!b) return k > l ^ a ? 1 : -1;\r\n\r\n  j = (k = xc.length) < (l = yc.length) ? k : l;\r\n\r\n  // Compare digit by digit.\r\n  for (i = 0; i < j; i++) if (xc[i] != yc[i]) return xc[i] > yc[i] ^ a ? 1 : -1;\r\n\r\n  // Compare lengths.\r\n  return k == l ? 0 : k > l ^ a ? 1 : -1;\r\n}\r\n\r\n\r\n/*\r\n * Check that n is a primitive number, an integer, and in range, otherwise throw.\r\n */\r\nfunction intCheck(n, min, max, name) {\r\n  if (n < min || n > max || n !== mathfloor(n)) {\r\n    throw Error\r\n     (bignumberError + (name || 'Argument') + (typeof n == 'number'\r\n       ? n < min || n > max ? ' out of range: ' : ' not an integer: '\r\n       : ' not a primitive number: ') + String(n));\r\n  }\r\n}\r\n\r\n\r\n// Assumes finite n.\r\nfunction isOdd(n) {\r\n  var k = n.c.length - 1;\r\n  return bitFloor(n.e / LOG_BASE) == k && n.c[k] % 2 != 0;\r\n}\r\n\r\n\r\nfunction toExponential(str, e) {\r\n  return (str.length > 1 ? str.charAt(0) + '.' + str.slice(1) : str) +\r\n   (e < 0 ? 'e' : 'e+') + e;\r\n}\r\n\r\n\r\nfunction toFixedPoint(str, e, z) {\r\n  var len, zs;\r\n\r\n  // Negative exponent?\r\n  if (e < 0) {\r\n\r\n    // Prepend zeros.\r\n    for (zs = z + '.'; ++e; zs += z);\r\n    str = zs + str;\r\n\r\n  // Positive exponent\r\n  } else {\r\n    len = str.length;\r\n\r\n    // Append zeros.\r\n    if (++e > len) {\r\n      for (zs = z, e -= len; --e; zs += z);\r\n      str += zs;\r\n    } else if (e < len) {\r\n      str = str.slice(0, e) + '.' + str.slice(e);\r\n    }\r\n  }\r\n\r\n  return str;\r\n}\r\n\r\n\r\n// EXPORT\r\n\r\n\r\nexport var BigNumber = clone();\r\n\r\nexport default BigNumber;\r\n"],"sourceRoot":""}