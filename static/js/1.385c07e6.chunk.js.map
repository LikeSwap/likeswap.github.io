{"version":3,"sources":["utils/translateTextHelpers.ts","hooks/useI18n.ts","hooks/useWeb3.ts","hooks/useContract.ts","utils/formatBalance.ts","utils/callHelpers.ts","components/UnlockButton.tsx","utils/erc20.ts","config/constants/ifo.ts","config/constants/index.ts","utils/referrals.ts"],"names":["variableRegex","getTranslation","translations","translationId","fallback","foundTranslation","find","translation","data","stringId","translatedString","text","includes","stringToReplace","exec","fallbackValueAtIndex","split","replace","replaceDynamicString","useI18n","useContext","TranslationsContext","length","RPC_URL","getRpcUrl","httpProvider","Web3","providers","HttpProvider","timeout","useWeb3","ethereum","useWallet","refEth","useRef","useState","web3","setweb3","useEffect","current","useContract","abi","address","contractOptions","eth","Contract","contract","setContract","useIfoContract","ifo","useERC20","erc20","useCake","getCakeAddress","useLottery","lottery","getLotteryAddress","useLotteryTicket","lotteryTicket","getLotteryTicketAddress","useMasterchef","masterChef","getMasterChefAddress","useSousChef","id","config","poolsConfig","pool","sousId","rawAbi","poolCategory","PoolCategory","BINANCE","sousChefBnb","sousChef","contractAddress","process","getBalanceNumber","balance","decimals","displayBalance","BigNumber","dividedBy","pow","toNumber","getFullDisplayBalance","toFixed","approve","lpContract","masterChefContract","account","a","methods","options","ethers","constants","MaxUint256","send","from","stake","pid","amount","deposit","times","toString","getReferralCode","on","tx","transactionHash","sousStake","sousChefContract","sousStakeBnb","value","unstake","withdraw","sousUnstake","emergencyWithdraw","sousEmegencyUnstake","harvest","soushHarvest","soushHarvestBnb","UnlockButton","props","TranslateString","connect","reset","onPresentConnectModal","useWalletModal","onClick","getContract","provider","getAllowance","allowance","call","getTokenBalance","tokenAddress","userAddress","balanceOf","ifos","isActive","name","subTitle","description","launchDate","launchTime","saleAmount","raiseAmount","cakeToBurn","projectSiteUrl","currency","currencyAddress","tokenDecimals","releaseBlockNumber","farmsConfig","filter","farm","isCommunity","map","tokenSymbol","referralContract","getWeb3","referralABI","getReferralAddress","hexPrefix","zeroAddress","likeRefCodeCookieKey","generateReferralLink","simplifieldAccount","code","Base64","encodeURI","getReferralCookie","likeCookie","document","cookie","row","startsWith","setReferralCode","referralCode","searchParams","URLSearchParams","isRefNotExists","get","isAccountNotExist","hasExistingCookie","getReferrer","referrerAddress","hasExistingReferrer","cleanRefferalCode","newReferralAddress","decode","referrereAddress","indexOf","cookieValue"],"mappings":"kJAGMA,EAAgB,UASTC,EAAiB,SAACC,EAA0BC,EAAuBC,GAC9E,IAAMC,EAAmBH,EAAaI,MAAK,SAACC,GAC1C,OAAOA,EAAYC,KAAKC,WAAaN,KAEvC,GAAIE,EAAkB,CACpB,IAAMK,EAAmBL,EAAiBG,KAAKG,KAE/C,OADyBD,EAAiBE,SAAS,KAb1B,SAACP,EAA0BD,GACtD,IAAMS,EAAkBb,EAAcc,KAAKT,GAAkB,GAEvDU,EAAuBX,EAASY,MAAM,KAAK,GACjD,OAAOX,EAAiBY,QAAQJ,EAAiBE,GAWtCG,CAAqBR,EAAkBN,GAEzCM,EAET,OAAON,GCNMe,IAdC,WAAO,IACbjB,EAAiBkB,qBAAWC,KAA5BnB,aAER,OAAO,SAACC,EAAuBC,GAC7B,MAAwB,UAApBF,EAAa,GACRE,EAELF,EAAaoB,OAAS,EACjBrB,EAAeC,EAAcC,EAAeC,GAE9CA,K,qUCPLmB,EAAUC,cACVC,EAAe,IAAIC,IAAKC,UAAUC,aAAaL,EAAS,CAAEM,QAAS,MAsB1DC,EAfC,WAAO,IACbC,EAAyCC,cAAzCD,SACFE,EAASC,iBAAOH,GAFF,EAGII,mBAAS,IAAIT,IAAKK,GAAYN,IAHlC,mBAGbW,EAHa,KAGPC,EAHO,KAYpB,OAPAC,qBAAU,WACJP,IAAaE,EAAOM,UACtBF,EAAQ,IAAIX,IAAKK,GAAYN,IAC7BQ,EAAOM,QAAUR,KAElB,CAACA,IAEGK,G,oGCVHI,EAAc,SAACC,EAAcC,EAAiBC,GAClD,IAAMP,EAAON,IAD2E,EAExDK,mBAAS,IAAIC,EAAKQ,IAAIC,SAASJ,EAAKC,EAASC,IAFW,mBAEjFG,EAFiF,KAEvEC,EAFuE,KAQxF,OAJAT,qBAAU,WACRS,EAAY,IAAIX,EAAKQ,IAAIC,SAASJ,EAAKC,EAASC,MAC/C,CAACF,EAAKC,EAASC,EAAiBP,IAE5BU,GAOIE,EAAiB,SAACN,GAE7B,OAAOF,EADQS,EACYP,IAGhBQ,EAAW,SAACR,GAEvB,OAAOF,EADUW,EACYT,IAGlBU,EAAU,WACrB,OAAOF,EAASG,gBAaLC,EAAa,WAExB,OAAOd,EADKe,EACYC,gBAGbC,EAAmB,WAE9B,OAAOjB,EADKkB,EACYC,gBAGbC,EAAgB,WAE3B,OAAOpB,EADKqB,EACYC,gBAGbC,EAAc,SAACC,GAC1B,IAAMC,EAASC,IAAY5D,MAAK,SAAC6D,GAAD,OAAUA,EAAKC,SAAWJ,KACpDK,EAASJ,EAAOK,eAAiBC,IAAaC,QAAUC,EAAcC,EAE5E,OAAOlC,EADK6B,EACYJ,EAAOU,gBAAgBC,O,iCC3EjD,yFAEaC,EAAmB,SAACC,GAAuC,IAAnBC,EAAkB,uDAAP,GACxDC,EAAiB,IAAIC,IAAUH,GAASI,UAAU,IAAID,IAAU,IAAIE,IAAIJ,IAC9E,OAAOC,EAAeI,YAGXC,EAAwB,SAACP,GAAuC,IAAnBC,EAAkB,uDAAP,GACnE,OAAOD,EAAQI,UAAU,IAAID,IAAU,IAAIE,IAAIJ,IAAWO,Y,obCJ/CC,EAAO,uCAAG,WAAOC,EAAYC,EAAoBC,GAAvC,SAAAC,EAAA,+EACdH,EAAWI,QACfL,QAAQE,EAAmBI,QAAQnD,QAASoD,SAAOC,UAAUC,YAC7DC,KAAK,CAAEC,KAAMR,KAHK,2CAAH,0DAMPS,EAAK,uCAAG,WAAOV,EAAoBW,EAAKC,EAAQX,GAAxC,SAAAC,EAAA,+EACZF,EAAmBG,QACvBU,QAAQF,EAAK,IAAInB,IAAUoB,GAAQE,MAAM,IAAItB,IAAU,IAAIE,IAAI,KAAKqB,WAAYC,eAChFR,KAAK,CAAEC,KAAMR,IACbgB,GAAG,mBAAmB,SAACC,GACtB,OAAOA,EAAGC,oBALK,2CAAH,4DASLC,EAAS,uCAAG,WAAOC,EAAkBT,EAAQX,GAAjC,SAAAC,EAAA,+EAChBmB,EAAiBlB,QACrBU,QAAQ,IAAIrB,IAAUoB,GAAQE,MAAM,IAAItB,IAAU,IAAIE,IAAI,KAAKqB,YAC/DP,KAAK,CAAEC,KAAMR,IACbgB,GAAG,mBAAmB,SAACC,GACtB,OAAOA,EAAGC,oBALS,2CAAH,0DASTG,EAAY,uCAAG,WAAOD,EAAkBT,EAAQX,GAAjC,SAAAC,EAAA,+EACnBmB,EAAiBlB,QACrBU,UACAL,KAAK,CAAEC,KAAMR,EAASsB,MAAO,IAAI/B,IAAUoB,GAAQE,MAAM,IAAItB,IAAU,IAAIE,IAAI,KAAKqB,aACpFE,GAAG,mBAAmB,SAACC,GACtB,OAAOA,EAAGC,oBALY,2CAAH,0DASZK,EAAO,uCAAG,WAAOxB,EAAoBW,EAAKC,EAAQX,GAAxC,SAAAC,EAAA,+EACdF,EAAmBG,QACvBsB,SAASd,EAAK,IAAInB,IAAUoB,GAAQE,MAAM,IAAItB,IAAU,IAAIE,IAAI,KAAKqB,YACrEP,KAAK,CAAEC,KAAMR,IACbgB,GAAG,mBAAmB,SAACC,GACtB,OAAOA,EAAGC,oBALO,2CAAH,4DASPO,EAAW,uCAAG,WAAOL,EAAkBT,EAAQX,GAAjC,SAAAC,EAAA,yDAEgB,+CAArCmB,EAAiBjB,QAAQnD,QAFJ,yCAGhBoE,EAAiBlB,QACrBwB,oBACAnB,KAAK,CAAEC,KAAMR,IACbgB,GAAG,mBAAmB,SAACC,GACtB,OAAOA,EAAGC,oBAPS,UAUgB,+CAArCE,EAAiBjB,QAAQnD,QAVJ,yCAWhBoE,EAAiBlB,QACrBwB,oBACAnB,KAAK,CAAEC,KAAMR,IACbgB,GAAG,mBAAmB,SAACC,GACtB,OAAOA,EAAGC,oBAfS,gCAkBlBE,EAAiBlB,QACrBsB,SAAS,IAAIjC,IAAUoB,GAAQE,MAAM,IAAItB,IAAU,IAAIE,IAAI,KAAKqB,YAChEP,KAAK,CAAEC,KAAMR,IACbgB,GAAG,mBAAmB,SAACC,GACtB,OAAOA,EAAGC,oBAtBW,2CAAH,0DA0BXS,EAAmB,uCAAG,WAAOP,EAAkBT,EAAQX,GAAjC,SAAAC,EAAA,+EAC1BmB,EAAiBlB,QACrBwB,oBACAnB,KAAK,CAAEC,KAAMR,IACbgB,GAAG,mBAAmB,SAACC,GACtB,OAAOA,EAAGC,oBALmB,2CAAH,0DASnBU,EAAO,uCAAG,WAAO7B,EAAoBW,EAAKV,GAAhC,SAAAC,EAAA,+EACdF,EAAmBG,QACvBU,QAAQF,EAAK,IAAKK,eAClBR,KAAK,CAAEC,KAAMR,IACbgB,GAAG,mBAAmB,SAACC,GACtB,OAAOA,EAAGC,oBALO,2CAAH,0DASPW,EAAY,uCAAG,WAAOT,EAAkBpB,GAAzB,SAAAC,EAAA,+EACnBmB,EAAiBlB,QACrBU,QAAQ,KACRL,KAAK,CAAEC,KAAMR,IACbgB,GAAG,mBAAmB,SAACC,GACtB,OAAOA,EAAGC,oBALY,2CAAH,wDASZY,EAAe,uCAAG,WAAOV,EAAkBpB,GAAzB,SAAAC,EAAA,+EACtBmB,EAAiBlB,QACrBU,UACAL,KAAK,CAAEC,KAAMR,EAASsB,MAAO,IAAI/B,IAAU,KAC3CyB,GAAG,mBAAmB,SAACC,GACtB,OAAOA,EAAGC,oBALe,2CAAH,yD,qFClFba,IAZM,SAACC,GACpB,IAAMC,EAAkBxG,cADM,EAEHa,cAAnB4F,EAFsB,EAEtBA,QAASC,EAFa,EAEbA,MACTC,EAA0BC,YAAeH,EAASC,GAAlDC,sBAER,OACE,cAAC,IAAD,yBAAQE,QAASF,GAA2BJ,GAA5C,aACGC,EAAgB,IAAK,sB,6LCNfM,EAAc,SAACC,EAAwBxF,GAGlD,OADiB,IADJ,IAAIhB,IAAKwG,GACItF,IAAIC,UAASM,EAA6BT,IAIzDyF,EAAY,uCAAG,WAC1B3C,EACAC,EACAC,GAH0B,eAAAC,EAAA,+EAMQH,EAAWI,QAAQwC,UAAU1C,EAASD,EAAmBI,QAAQnD,SAAS2F,OANlF,cAMlBD,EANkB,yBAOjBA,GAPiB,yDASjB,KATiB,yDAAH,0DAaZE,EAAe,uCAAG,WAC7BJ,EACAK,EACAC,GAH6B,iBAAA7C,EAAA,6DAKvB7C,EAAWmF,EAAYC,EAAUK,GALV,kBAOGzF,EAAS8C,QAAQ6C,UAAUD,GAAaH,OAP3C,cAOrBvD,EAPqB,yBAQpBA,GARoB,yDAUpB,KAVoB,yDAAH,2D,+JC+Fb4D,EAtHK,CAClB,CACE1E,GAAI,QACJtB,QAAS,6CACTiG,UAAU,EACVC,KAAM,mBACNC,SAAU,sBACVC,YACE,uHACFC,WAAY,UACZC,WAAY,UACZC,WAAY,oBACZC,YAAa,aACbC,WAAY,WACZC,eAAgB,yBAChBC,SAAU,cACVC,gBAAiB,6CACjBC,cAAe,EACfC,mBAAoB,SAEtB,CACExF,GAAI,QACJtB,QAAS,6CACTiG,UAAU,EACVC,KAAM,qBACNC,SAAU,gCACVC,YACE,ySACFC,WAAY,UACZC,WAAY,UACZC,WAAY,gBACZC,YAAa,WACbC,WAAY,WACZC,eAAgB,uBAChBC,SAAU,cACVC,gBAAiB,6CACjBC,cAAe,EACfC,mBAAoB,SAEtB,CACExF,GAAI,QACJtB,QAAS,6CACTiG,UAAU,EACVC,KAAM,mBACNC,SAAU,qCACVC,YACE,yhBACFC,WAAY,SACZC,WAAY,UACZC,WAAY,gBACZC,YAAa,aACbC,WAAY,WACZC,eAAgB,0BAChBC,SAAU,cACVC,gBAAiB,6CACjBC,cAAe,GACfC,mBAAoB,SAEtB,CACExF,GAAI,SACJtB,QAAS,6CACTiG,UAAU,EACVC,KAAM,8BACNC,SAAU,2CACVC,YACE,6ZACFC,WAAY,UACZC,WAAY,UACZC,WAAY,oBACZC,YAAa,aACbC,WAAY,WACZC,eAAgB,6BAChBC,SAAU,cACVC,gBAAiB,6CACjBC,cAAe,GACfC,mBAAoB,SAEtB,CACExF,GAAI,UACJtB,QAAS,6CACTiG,UAAU,EACVC,KAAM,eACNC,SAAU,6EACVC,YACE,4VACFC,WAAY,UACZC,WAAY,UACZC,WAAY,kBACZC,YAAa,WACbC,WAAY,WACZC,eAAgB,6BAChBC,SAAU,cACVC,gBAAiB,6CACjBC,cAAe,GACfC,mBAAoB,SAEtB,CACExF,GAAI,OACJtB,QAAS,6CACTiG,UAAU,EACVC,KAAM,YACNC,SAAU,6EACVC,YACE,yVACFC,WAAY,UACZC,WAAY,UACZC,WAAY,iBACZC,YAAa,WACbC,WAAY,WACZC,eAAgB,wBAChBC,SAAU,WACVC,gBAAiB,6CACjBC,cAAe,GACfC,mBAAoB,UCjHDC,IAAYC,QAAO,SAACC,GAAD,OAAUA,EAAKC,eAAaC,KAAI,SAACF,GAAD,OAAUA,EAAKG,gB,qMCOnFC,EAAmB,IADZC,cACqBpH,IAAIC,UAASoH,EAAmCC,eAC5EC,EAAY,KACZC,EAAW,UAAMD,EAAN,4CACXE,EAAuB,gBAGhBC,EAAuB,SAAC5E,GACnC,IAAM6E,EAAqB7E,EAAQzE,QAAQkJ,EAAW,IAChDK,EAAOC,IAAOC,UAAUH,GAAoBtJ,QAAQ,KAAM,IAGhE,MAAM,GAAN,OADyD,uBACzD,gBAA0BuJ,IAGrB,SAASG,IACd,IAAMC,EAAaC,SAASC,OAAO9J,MAAM,MAAMV,MAAK,SAACyK,GAAD,OAASA,EAAIC,WAAJ,UAAkBX,EAAlB,SAC7D,MAA0B,qBAAfO,EACF,GAGFA,EAAW5J,MAAM,KAAK,GAGxB,SAAeiK,EAAtB,oC,4CAAO,WAA+BC,EAAcxF,GAA7C,+BAAAC,EAAA,yDACCwF,EAAe,IAAIC,gBAAgBF,GACnCG,EAA6C,OAA5BF,EAAaG,IAAI,OAClCC,EAAgC,OAAZ7F,GACtB2F,IAAkBE,EAJjB,0CAKI,GALJ,cAQCC,EAAoBb,IARrB,SASyBZ,EAAiBnE,QAAQ6F,YAAY/F,GAAS2C,OATvE,UASCqD,EATD,OAWCC,EAAsBD,IAAoBtB,GAC5CoB,IAAqBG,EAZpB,2CAaI,GAbJ,WAiBCC,EAjBD,UAiBwBV,EAAajK,QAAQ,QAAS,IAjBtD,MAmBC4K,EAAqBpB,IAAOqB,OAAOF,GACnCG,EApBD,UAoBuB5B,GApBvB,OAoBmC0B,GAEpCnG,IAAYqG,EAtBX,2CAuBI,GAvBJ,eA0BkD,IAAnDlB,SAASC,OAAOkB,QAAQ3B,KAC1BQ,SAASC,OAAT,UAAqBT,EAArB,YAA6CuB,IA3B1C,mBA8BE,GA9BF,6C,sBAiCA,SAASnF,IACd,IAAMwF,EAActB,IACpB,IAAKsB,EACH,OAAO7B,EAGT,IAAMyB,EAAqBpB,IAAOqB,OAAOG,GAEnCF,EAAgB,UAAM5B,GAAN,OAAkB0B,GAGxC,OAFAhB,SAASC,OAAT,UAAqBT,EAArB,6CAEO0B,I","file":"static/js/1.385c07e6.chunk.js","sourcesContent":["import { useContext } from 'react'\nimport { TranslationsContext } from '../contexts/Localisation/translationsContext'\n\nconst variableRegex = /%(.*?)%/\n\nconst replaceDynamicString = (foundTranslation: string, fallback: string) => {\n  const stringToReplace = variableRegex.exec(foundTranslation)[0]\n  // const indexToReplace = foundTranslation.split(' ').indexOf(stringToReplace)\n  const fallbackValueAtIndex = fallback.split(' ')[0]\n  return foundTranslation.replace(stringToReplace, fallbackValueAtIndex)\n}\n\nexport const getTranslation = (translations: Array<any>, translationId: number, fallback: string) => {\n  const foundTranslation = translations.find((translation) => {\n    return translation.data.stringId === translationId\n  })\n  if (foundTranslation) {\n    const translatedString = foundTranslation.data.text\n    const includesVariable = translatedString.includes('%')\n    if (includesVariable) {\n      return replaceDynamicString(translatedString, fallback)\n    }\n    return translatedString\n  }\n  return fallback\n}\n\n// TODO: Replace instances where this is called directly with the \"useI18n\" hook.\n// Using this directly can lead to errors because \"useContext\" is not preserved between renders\n// @see https://reactjs.org/docs/hooks-rules.html\nexport const TranslateString = (translationId: number, fallback: string) => {\n  const { translations } = useContext(TranslationsContext)\n  if (translations[0] === 'error') {\n    return fallback\n  }\n  if (translations.length > 0) {\n    return getTranslation(translations, translationId, fallback)\n  }\n  return fallback\n}\n","import { useContext } from 'react'\nimport { TranslationsContext } from '../contexts/Localisation/translationsContext'\nimport { getTranslation } from '../utils/translateTextHelpers'\n\nconst useI18n = () => {\n  const { translations } = useContext(TranslationsContext)\n\n  return (translationId: number, fallback: string) => {\n    if (translations[0] === 'error') {\n      return fallback\n    }\n    if (translations.length > 0) {\n      return getTranslation(translations, translationId, fallback)\n    }\n    return fallback\n  }\n}\n\nexport default useI18n\n","import { useEffect, useState, useRef } from 'react'\nimport Web3 from 'web3'\nimport { HttpProviderOptions } from 'web3-core-helpers'\nimport { provider as ProviderType } from 'web3-core'\nimport { useWallet } from '@binance-chain/bsc-use-wallet'\nimport getRpcUrl from 'utils/getRpcUrl'\n\nconst RPC_URL = getRpcUrl()\nconst httpProvider = new Web3.providers.HttpProvider(RPC_URL, { timeout: 10000 } as HttpProviderOptions)\n\n/**\n * Provides a web3 instance using the provider provided by useWallet\n * with a fallback of an httpProver\n * Recreate web3 instance only if the ethereum provider change\n */\nconst useWeb3 = () => {\n  const { ethereum }: { ethereum: ProviderType } = useWallet()\n  const refEth = useRef(ethereum)\n  const [web3, setweb3] = useState(new Web3(ethereum || httpProvider))\n\n  useEffect(() => {\n    if (ethereum !== refEth.current) {\n      setweb3(new Web3(ethereum || httpProvider))\n      refEth.current = ethereum\n    }\n  }, [ethereum])\n\n  return web3\n}\n\nexport default useWeb3\n","import { useEffect, useState } from 'react'\nimport { AbiItem } from 'web3-utils'\nimport { ContractOptions } from 'web3-eth-contract'\nimport useWeb3 from 'hooks/useWeb3'\nimport { getMasterChefAddress, getCakeAddress, getLotteryAddress, getLotteryTicketAddress } from 'utils/addressHelpers'\nimport { poolsConfig } from 'config/constants'\nimport { PoolCategory } from 'config/constants/types'\nimport ifo from 'config/abi/ifo.json'\nimport erc20 from 'config/abi/erc20.json'\nimport rabbitmintingfarm from 'config/abi/rabbitmintingfarm.json'\nimport pancakeRabbits from 'config/abi/pancakeRabbits.json'\nimport lottery from 'config/abi/lottery.json'\nimport lotteryTicket from 'config/abi/lotteryNft.json'\nimport masterChef from 'config/abi/masterchef.json'\nimport sousChef from 'config/abi/sousChef.json'\nimport sousChefBnb from 'config/abi/sousChefBnb.json'\n\nconst useContract = (abi: AbiItem, address: string, contractOptions?: ContractOptions) => {\n  const web3 = useWeb3()\n  const [contract, setContract] = useState(new web3.eth.Contract(abi, address, contractOptions))\n\n  useEffect(() => {\n    setContract(new web3.eth.Contract(abi, address, contractOptions))\n  }, [abi, address, contractOptions, web3])\n\n  return contract\n}\n\n/**\n * Helper hooks to get specific contracts (by ABI)\n */\n\nexport const useIfoContract = (address: string) => {\n  const ifoAbi = ifo as unknown as AbiItem\n  return useContract(ifoAbi, address)\n}\n\nexport const useERC20 = (address: string) => {\n  const erc20Abi = erc20 as unknown as AbiItem\n  return useContract(erc20Abi, address)\n}\n\nexport const useCake = () => {\n  return useERC20(getCakeAddress())\n}\n\nexport const useRabbitMintingFarm = (address: string) => {\n  const rabbitMintingFarmAbi = rabbitmintingfarm as unknown as AbiItem\n  return useContract(rabbitMintingFarmAbi, address)\n}\n\nexport const usePancakeRabbits = (address: string) => {\n  const pancakeRabbitsAbi = pancakeRabbits as unknown as AbiItem\n  return useContract(pancakeRabbitsAbi, address)\n}\n\nexport const useLottery = () => {\n  const abi = lottery as unknown as AbiItem\n  return useContract(abi, getLotteryAddress())\n}\n\nexport const useLotteryTicket = () => {\n  const abi = lotteryTicket as unknown as AbiItem\n  return useContract(abi, getLotteryTicketAddress())\n}\n\nexport const useMasterchef = () => {\n  const abi = masterChef as unknown as AbiItem\n  return useContract(abi, getMasterChefAddress())\n}\n\nexport const useSousChef = (id) => {\n  const config = poolsConfig.find((pool) => pool.sousId === id)\n  const rawAbi = config.poolCategory === PoolCategory.BINANCE ? sousChefBnb : sousChef\n  const abi = rawAbi as unknown as AbiItem\n  return useContract(abi, config.contractAddress[process.env.REACT_APP_CHAIN_ID])\n}\n\nexport default useContract\n","import BigNumber from 'bignumber.js'\n\nexport const getBalanceNumber = (balance: BigNumber, decimals = 18) => {\n  const displayBalance = new BigNumber(balance).dividedBy(new BigNumber(10).pow(decimals))\n  return displayBalance.toNumber()\n}\n\nexport const getFullDisplayBalance = (balance: BigNumber, decimals = 18) => {\n  return balance.dividedBy(new BigNumber(10).pow(decimals)).toFixed()\n}\n","import BigNumber from 'bignumber.js'\nimport { ethers } from 'ethers'\nimport { getReferralCode } from 'utils/referrals'\n\nexport const approve = async (lpContract, masterChefContract, account) => {\n  return lpContract.methods\n    .approve(masterChefContract.options.address, ethers.constants.MaxUint256)\n    .send({ from: account })\n}\n\nexport const stake = async (masterChefContract, pid, amount, account) => {\n  return masterChefContract.methods\n    .deposit(pid, new BigNumber(amount).times(new BigNumber(10).pow(18)).toString(), getReferralCode())\n    .send({ from: account })\n    .on('transactionHash', (tx) => {\n      return tx.transactionHash\n    })\n}\n\nexport const sousStake = async (sousChefContract, amount, account) => {\n  return sousChefContract.methods\n    .deposit(new BigNumber(amount).times(new BigNumber(10).pow(18)).toString())\n    .send({ from: account })\n    .on('transactionHash', (tx) => {\n      return tx.transactionHash\n    })\n}\n\nexport const sousStakeBnb = async (sousChefContract, amount, account) => {\n  return sousChefContract.methods\n    .deposit()\n    .send({ from: account, value: new BigNumber(amount).times(new BigNumber(10).pow(18)).toString() })\n    .on('transactionHash', (tx) => {\n      return tx.transactionHash\n    })\n}\n\nexport const unstake = async (masterChefContract, pid, amount, account) => {\n  return masterChefContract.methods\n    .withdraw(pid, new BigNumber(amount).times(new BigNumber(10).pow(18)).toString())\n    .send({ from: account })\n    .on('transactionHash', (tx) => {\n      return tx.transactionHash\n    })\n}\n\nexport const sousUnstake = async (sousChefContract, amount, account) => {\n  // shit code: hard fix for old CTK and BLK\n  if (sousChefContract.options.address === '0x3B9B74f48E89Ebd8b45a53444327013a2308A9BC') {\n    return sousChefContract.methods\n      .emergencyWithdraw()\n      .send({ from: account })\n      .on('transactionHash', (tx) => {\n        return tx.transactionHash\n      })\n  }\n  if (sousChefContract.options.address === '0xBb2B66a2c7C2fFFB06EA60BeaD69741b3f5BF831') {\n    return sousChefContract.methods\n      .emergencyWithdraw()\n      .send({ from: account })\n      .on('transactionHash', (tx) => {\n        return tx.transactionHash\n      })\n  }\n  return sousChefContract.methods\n    .withdraw(new BigNumber(amount).times(new BigNumber(10).pow(18)).toString())\n    .send({ from: account })\n    .on('transactionHash', (tx) => {\n      return tx.transactionHash\n    })\n}\n\nexport const sousEmegencyUnstake = async (sousChefContract, amount, account) => {\n  return sousChefContract.methods\n    .emergencyWithdraw()\n    .send({ from: account })\n    .on('transactionHash', (tx) => {\n      return tx.transactionHash\n    })\n}\n\nexport const harvest = async (masterChefContract, pid, account) => {\n  return masterChefContract.methods\n    .deposit(pid, '0', getReferralCode())\n    .send({ from: account })\n    .on('transactionHash', (tx) => {\n      return tx.transactionHash\n    })\n}\n\nexport const soushHarvest = async (sousChefContract, account) => {\n  return sousChefContract.methods\n    .deposit('0')\n    .send({ from: account })\n    .on('transactionHash', (tx) => {\n      return tx.transactionHash\n    })\n}\n\nexport const soushHarvestBnb = async (sousChefContract, account) => {\n  return sousChefContract.methods\n    .deposit()\n    .send({ from: account, value: new BigNumber(0) })\n    .on('transactionHash', (tx) => {\n      return tx.transactionHash\n    })\n}\n","import React from 'react'\nimport { Button, useWalletModal } from '@likeswaporg/uikit'\nimport { useWallet } from '@binance-chain/bsc-use-wallet'\nimport useI18n from 'hooks/useI18n'\n\nconst UnlockButton = (props) => {\n  const TranslateString = useI18n()\n  const { connect, reset } = useWallet()\n  const { onPresentConnectModal } = useWalletModal(connect, reset)\n\n  return (\n    <Button onClick={onPresentConnectModal} {...props}>\n      {TranslateString(292, 'Unlock Wallet')}\n    </Button>\n  )\n}\n\nexport default UnlockButton\n","import Web3 from 'web3'\nimport { provider as ProviderType } from 'web3-core'\nimport { Contract } from 'web3-eth-contract'\nimport { AbiItem } from 'web3-utils'\nimport erc20 from 'config/abi/erc20.json'\n\nexport const getContract = (provider: ProviderType, address: string) => {\n  const web3 = new Web3(provider)\n  const contract = new web3.eth.Contract(erc20 as unknown as AbiItem, address)\n  return contract\n}\n\nexport const getAllowance = async (\n  lpContract: Contract,\n  masterChefContract: Contract,\n  account: string,\n): Promise<string> => {\n  try {\n    const allowance: string = await lpContract.methods.allowance(account, masterChefContract.options.address).call()\n    return allowance\n  } catch (e) {\n    return '0'\n  }\n}\n\nexport const getTokenBalance = async (\n  provider: ProviderType,\n  tokenAddress: string,\n  userAddress: string,\n): Promise<string> => {\n  const contract = getContract(provider, tokenAddress)\n  try {\n    const balance: string = await contract.methods.balanceOf(userAddress).call()\n    return balance\n  } catch (e) {\n    return '0'\n  }\n}\n","import { Ifo } from './types'\n\nconst ifos: Ifo[] = [\n  {\n    id: 'blink',\n    address: '0x44a9Cc8463EC00937242b660BF65B10365d99baD',\n    isActive: false,\n    name: 'Demo BLINk (BLK)',\n    subTitle: 'Online games on BSC',\n    description:\n      'BLINk enables BNB holders to enjoy gaming experiences that WINk users on Tron have been enjoying for over two years.',\n    launchDate: 'Nov. 20',\n    launchTime: '9PM SGT',\n    saleAmount: '100,000,000 BLINK',\n    raiseAmount: '$1,000,000',\n    cakeToBurn: '$500,000',\n    projectSiteUrl: 'https://blink.wink.org',\n    currency: 'CAKE-BNB LP',\n    currencyAddress: '0xA527a61703D82139F8a06Bc30097cC9CAA2df5A6',\n    tokenDecimals: 6,\n    releaseBlockNumber: 3279767,\n  },\n  {\n    id: 'ditto',\n    address: '0x570c9eB19553526Fb35895a531928E19C7D20788',\n    isActive: false,\n    name: 'Demo Ditto (DITTO)',\n    subTitle: 'Next-gen elastic supply token',\n    description:\n      'Ditto is the first elastic supply token on the Binance Smart Chain. Its goal is to maintain a stable price of $1, where its supply will adapt to changes in demand. All supply changes will apply equally to every wallet holding Ditto, and holders should always have the same % of the total supply',\n    launchDate: 'Dec. 23',\n    launchTime: '3PM SGT',\n    saleAmount: '700,000 DITTO',\n    raiseAmount: '$630,000',\n    cakeToBurn: '$315,000',\n    projectSiteUrl: 'https://ditto.money/',\n    currency: 'CAKE-BNB LP',\n    currencyAddress: '0xA527a61703D82139F8a06Bc30097cC9CAA2df5A6',\n    tokenDecimals: 9,\n    releaseBlockNumber: 3279767,\n  },\n  {\n    id: 'tenet',\n    address: '0xB922aA19A2603A07C6C9ED6c236618C9bac51f06',\n    isActive: false,\n    name: 'Demo Tenet (TEN)',\n    subTitle: 'Cross-chain Automated Market Maker',\n    description:\n      'Tenet is a cross-chain Automated Market Maker (AMM) connector that provides a decentralized Liquidity Tap for various tokens. The Liquidity Tap is the powerhouse of the Liquidity Pool, employing a dynamic algorithm to give the Liquidity Provider fairer, more efficient, and richer incentives. Tenet aims to build a cross-chain and cross-platform toolkit protocol that allows the demand side to customize the parameters of the liquidity tap, allowing them to reach out to more liquidity participants effectively and with relative ease.',\n    launchDate: 'Jan. 5',\n    launchTime: '3PM SGT',\n    saleAmount: '1,000,000 TEN',\n    raiseAmount: '$1,000,000',\n    cakeToBurn: '$500,000',\n    projectSiteUrl: 'https://www.tenet.farm/',\n    currency: 'CAKE-BNB LP',\n    currencyAddress: '0xA527a61703D82139F8a06Bc30097cC9CAA2df5A6',\n    tokenDecimals: 18,\n    releaseBlockNumber: 3483883,\n  },\n  {\n    id: 'helmet',\n    address: '0xa32509d760ee47Eb2Be96D338b5d69B5FBa4eFEB',\n    isActive: false,\n    name: 'Demo Helmet.insure (Helmet)',\n    subTitle: 'Crypto-assets insurance trading platform',\n    description:\n      'Helmet is a peer-to-peer insurance protocol written with options trading logic, which allows anyone to create any insurance policy easily in the market. Helmet aims to enable DeFi users to be protected against the risk of price fluctuations by providing price-shield insurance for BSC assets. They provide suppliers with a range of insurance types to sell, giving a variety of hedging strategies to the market.',\n    launchDate: 'Jan. 13',\n    launchTime: '5PM SGT',\n    saleAmount: '10,000,000 Helmet',\n    raiseAmount: '$1,000,000',\n    cakeToBurn: '$500,000',\n    projectSiteUrl: 'https://www.helmet.insure/',\n    currency: 'CAKE-BNB LP',\n    currencyAddress: '0xA527a61703D82139F8a06Bc30097cC9CAA2df5A6',\n    tokenDecimals: 18,\n    releaseBlockNumber: 3771926,\n  },\n  {\n    id: 'soteria',\n    address: '0x9C21123D94b93361a29B2C2EFB3d5CD8B17e0A9e',\n    isActive: false,\n    name: 'Demo Soteria',\n    subTitle: 'A blockchain based mutual to share the risk of DeFi on Binance Smart Chain',\n    description:\n      'Soteria allows users to buy insurance cover to greatly diminish or reduce the financial risk of hacks. It replaces the idea of a traditional insurance company, because it is wholly owned by the members. The model encourages engagement as members receive economic incentives for participating in Risk Assessment, Claims Assessment and Governance.',\n    launchDate: 'Jan. 21',\n    launchTime: '4PM SGT',\n    saleAmount: '1,500,000 wSOTE',\n    raiseAmount: '$525,000',\n    cakeToBurn: '$262,500',\n    projectSiteUrl: 'https://soteria.finance/#/',\n    currency: 'CAKE-BNB LP',\n    currencyAddress: '0xA527a61703D82139F8a06Bc30097cC9CAA2df5A6',\n    tokenDecimals: 18,\n    releaseBlockNumber: 4086064,\n  },\n  {\n    id: 'like',\n    address: '0x4a162e9a102d2195c1c4bf3bd319ad25a895ccaf',\n    isActive: true,\n    name: 'Demo Like',\n    subTitle: 'A blockchain based mutual to share the risk of DeFi on Binance Smart Chain',\n    description:\n      'Like allows users to buy insurance cover to greatly diminish or reduce the financial risk of hacks. It replaces the idea of a traditional insurance company, because it is wholly owned by the members. The model encourages engagement as members receive economic incentives for participating in Risk Assessment, Claims Assessment and Governance.',\n    launchDate: 'Jan. 21',\n    launchTime: '4PM SGT',\n    saleAmount: '1,000,000 LIKE',\n    raiseAmount: '$200,000',\n    cakeToBurn: '$262,500',\n    projectSiteUrl: 'https://likeswap.org/',\n    currency: 'LIKE-BNB',\n    currencyAddress: '0x4a162e9a102d2195c1c4bf3bd319ad25a895ccaf',\n    tokenDecimals: 18,\n    releaseBlockNumber: 4086064,\n  },\n]\n// 100000000000000\n// 149199999999999995805696\nexport default ifos\n","import farmsConfig from './farms'\n\nconst communityFarms = farmsConfig.filter((farm) => farm.isCommunity).map((farm) => farm.tokenSymbol)\n\nexport { farmsConfig, communityFarms }\nexport { default as poolsConfig } from './pools'\nexport { default as ifosConfig } from './ifo'\n","/* eslint @typescript-eslint/no-var-requires: \"off\" */\nimport { AbiItem } from 'web3-utils'\nimport referralABI from 'config/abi/referral.json'\nimport { getReferralAddress } from 'utils/addressHelpers'\nimport { getWeb3 } from 'utils/web3'\nimport { Base64 } from 'js-base64';\n\n\nconst web3 = getWeb3()\nconst referralContract = new web3.eth.Contract(referralABI as unknown as AbiItem, getReferralAddress())\nconst hexPrefix = '0x'\nconst zeroAddress = `${hexPrefix}0000000000000000000000000000000000000000`\nconst likeRefCodeCookieKey = 'referral_code'\n// https://likeswap.org?ref=4UUx61jBMumJ7EZbiLly91hX9fM5HzuuGDejhQFl2I+EE7s/Mtn1kg\n\nexport const generateReferralLink = (account) => {\n  const simplifieldAccount = account.replace(hexPrefix, '')\n  const code = Base64.encodeURI(simplifieldAccount).replace('==', '')\n\n  const BASE_URL = process.env.NODE_ENV === 'production' ? 'https://likeswap.org' : 'http://localhost:3000'\n  return `${BASE_URL}?ref=${code}`\n}\n\nexport function getReferralCookie() {\n  const likeCookie = document.cookie.split('; ').find((row) => row.startsWith(`${likeRefCodeCookieKey}=`))\n  if (typeof likeCookie === 'undefined') {\n    return ''\n  }\n\n  return likeCookie.split('=')[1]\n}\n\nexport async function setReferralCode(referralCode, account) {\n  const searchParams = new URLSearchParams(referralCode)\n  const isRefNotExists = searchParams.get('ref') === null\n  const isAccountNotExist = account === null\n  if (isRefNotExists || isAccountNotExist) {\n    return false\n  }\n\n  const hasExistingCookie = getReferralCookie()\n  const referrerAddress = await referralContract.methods.getReferrer(account).call()\n\n  const hasExistingReferrer = referrerAddress !== zeroAddress\n  if (hasExistingCookie || hasExistingReferrer) {\n    return false\n  }\n\n  // using searchParams.get('ref') functions removes some characters from the url\n  const cleanRefferalCode = `${referralCode.replace('?ref=', '')}==`\n  \n  const newReferralAddress = Base64.decode(cleanRefferalCode)\n  const referrereAddress = `${hexPrefix}${newReferralAddress}`\n\n  if (account === referrereAddress) {\n    return false\n  }\n\n  if (document.cookie.indexOf(likeRefCodeCookieKey) === -1) {\n    document.cookie = `${likeRefCodeCookieKey}=${cleanRefferalCode}`\n  }\n\n  return true\n}\n\nexport function getReferralCode() {\n  const cookieValue = getReferralCookie()\n  if (!cookieValue) {\n    return zeroAddress\n  }\n\n  const newReferralAddress = Base64.decode(cookieValue)\n\n  const referrereAddress = `${hexPrefix}${newReferralAddress}`\n  document.cookie = `${likeRefCodeCookieKey}=; expires=Thu, 01 Jan 1970 00:00:00 UTC;`\n\n  return referrereAddress\n}\n\nexport default generateReferralLink\n"],"sourceRoot":""}